{"pagelen": 50, "previous": "data/repositories/hoffmanlab/segway/pullrequests_state=MERGED&state=OPEN&state=SUPERSEDED&state=DECLINED&page=2.json", "values": [{"description": "Fix multipledatasets test case to account for difference in between the OS.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/101/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:83a03f2f535d%0De9c52989b680?from_pullrequest_id=101"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/101/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/101.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/101/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/101/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/101"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/101/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:83a03f2f535d%0De9c52989b680?from_pullrequest_id=101"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/101/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/101/statuses_page=1.json"}}, "title": "Multiple gd archive", "close_source_branch": false, "type": "pullrequest", "id": 101, "destination": {"commit": {"hash": "e9c52989b680", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e9c52989b680.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e9c52989b680"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-05-24T18:54:13.445745+00:00", "summary": {"raw": "Fix multipledatasets test case to account for difference in between the OS.", "markup": "markdown", "html": "<p>Fix multipledatasets test case to account for difference in between the OS.</p>", "type": "rendered"}, "source": {"commit": {"hash": "28a6a28f4fee", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/28a6a28f4fee"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/28a6a28f4fee"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "multiple-gd-archive"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-24T19:28:31.611599+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": {"hash": "83a03f2f535d", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/83a03f2f535d.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/83a03f2f535d"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "Fixed bug trying to write str out to a file opened as a bytes file in layer.py, leading to a python 3 encoding issue.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/102/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:da0cea64d98b%0D83a03f2f535d?from_pullrequest_id=102"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/102/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/102.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/102/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/102/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/102"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/102/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:da0cea64d98b%0D83a03f2f535d?from_pullrequest_id=102"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/102/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/102/statuses_page=1.json"}}, "title": "Fix segway BigBed Bug", "close_source_branch": false, "type": "pullrequest", "id": 102, "destination": {"commit": {"hash": "83a03f2f535d", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/83a03f2f535d.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/83a03f2f535d"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-06-07T18:28:17.553050+00:00", "summary": {"raw": "Fixed bug trying to write str out to a file opened as a bytes file in layer.py, leading to a python 3 encoding issue.", "markup": "markdown", "html": "<p>Fixed bug trying to write str out to a file opened as a bytes file in layer.py, leading to a python 3 encoding issue.</p>", "type": "rendered"}, "source": {"commit": {"hash": "da0cea64d98b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/da0cea64d98b"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/da0cea64d98b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "default"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-12T18:41:19.515931+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": {"hash": "da0cea64d98b", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/da0cea64d98b.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/da0cea64d98b"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "This pull request removes any sleeping on the main thread when training with multiple instances. This stops any blocking on the main thread and allows all threads to immediately attempt to join the main thread. This also allows for `SIGINT` / `KeyboardInterrupt` to be immediately be caught if necessary from the main thread.\r\n\r\nThis PR also removes any sleeping from occuring with multiple instances when running locally.\r\n\r\nIn regards to Python 2 and the old implementation there were some discoveries about the existing code:\r\n\r\n* `KeyboardInterrupt`s were caught in the main thread but never caused the other threads to exit in any way. Single threaded works fine for `KeyboardInterrupt`s\r\n* The `JOIN_TIMEOUT` was effectively the window to poll for interrupts. Settings this shorter \\(to 1\\) would seem to have had the same effect with unknown performance penalty or gain.\r\n\r\nIt's worthwhile to note that currently, and as far as I can tell, when a `KeyboardInterrupt` or SIGINT is caught by the main thread \\(in Python 3 and now as implemented in Python 2\\), all threads stop due to an `IOError` exception since the main thread exits after the exception remains uncaught. There is no real \"graceful\" mechanism for other threads to terminate when a single thread dies nor can I find an implementation. There was a `interrupt_event` , of `Event` type, in the `Runner` object with no use anywhere \\(and was removed as dead code from this PR\\). It was `set` and nothing else checked it. Presumably it would be somehow passed on into a `RestartableJobDict` but there's no clear place where it would go since they are effectively queues with no obvious mechanism on how to exit gracefully themselves on a signal. It could be checked on the looping over training rounds but that might be too slow to wait for an entire EM iteration on a thread before exiting. Though that implementation might be desirable from a parameter iteration perspective and using segway-winner.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/103/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:492896b2d658%0Dda0cea64d98b?from_pullrequest_id=103"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/103/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/103.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/103/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/103/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/103"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/103/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:492896b2d658%0Dda0cea64d98b?from_pullrequest_id=103"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/103/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/103/statuses_page=1.json"}}, "title": "Remove sleeping in main segway thread and any thread sleeping when running locally", "close_source_branch": true, "type": "pullrequest", "id": 103, "destination": {"commit": {"hash": "da0cea64d98b", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/da0cea64d98b.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/da0cea64d98b"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-06-12T16:36:04.199755+00:00", "summary": {"raw": "This pull request removes any sleeping on the main thread when training with multiple instances. This stops any blocking on the main thread and allows all threads to immediately attempt to join the main thread. This also allows for `SIGINT` / `KeyboardInterrupt` to be immediately be caught if necessary from the main thread.\r\n\r\nThis PR also removes any sleeping from occuring with multiple instances when running locally.\r\n\r\nIn regards to Python 2 and the old implementation there were some discoveries about the existing code:\r\n\r\n* `KeyboardInterrupt`s were caught in the main thread but never caused the other threads to exit in any way. Single threaded works fine for `KeyboardInterrupt`s\r\n* The `JOIN_TIMEOUT` was effectively the window to poll for interrupts. Settings this shorter \\(to 1\\) would seem to have had the same effect with unknown performance penalty or gain.\r\n\r\nIt's worthwhile to note that currently, and as far as I can tell, when a `KeyboardInterrupt` or SIGINT is caught by the main thread \\(in Python 3 and now as implemented in Python 2\\), all threads stop due to an `IOError` exception since the main thread exits after the exception remains uncaught. There is no real \"graceful\" mechanism for other threads to terminate when a single thread dies nor can I find an implementation. There was a `interrupt_event` , of `Event` type, in the `Runner` object with no use anywhere \\(and was removed as dead code from this PR\\). It was `set` and nothing else checked it. Presumably it would be somehow passed on into a `RestartableJobDict` but there's no clear place where it would go since they are effectively queues with no obvious mechanism on how to exit gracefully themselves on a signal. It could be checked on the looping over training rounds but that might be too slow to wait for an entire EM iteration on a thread before exiting. Though that implementation might be desirable from a parameter iteration perspective and using segway-winner.", "markup": "markdown", "html": "<p>This pull request removes any sleeping on the main thread when training with multiple instances. This stops any blocking on the main thread and allows all threads to immediately attempt to join the main thread. This also allows for <code>SIGINT</code> / <code>KeyboardInterrupt</code> to be immediately be caught if necessary from the main thread.</p>\n<p>This PR also removes any sleeping from occuring with multiple instances when running locally.</p>\n<p>In regards to Python 2 and the old implementation there were some discoveries about the existing code:</p>\n<ul>\n<li><code>KeyboardInterrupt</code>s were caught in the main thread but never caused the other threads to exit in any way. Single threaded works fine for <code>KeyboardInterrupt</code>s</li>\n<li>The <code>JOIN_TIMEOUT</code> was effectively the window to poll for interrupts. Settings this shorter (to 1) would seem to have had the same effect with unknown performance penalty or gain.</li>\n</ul>\n<p>It's worthwhile to note that currently, and as far as I can tell, when a <code>KeyboardInterrupt</code> or SIGINT is caught by the main thread (in Python 3 and now as implemented in Python 2), all threads stop due to an <code>IOError</code> exception since the main thread exits after the exception remains uncaught. There is no real \"graceful\" mechanism for other threads to terminate when a single thread dies nor can I find an implementation. There was a <code>interrupt_event</code> , of <code>Event</code> type, in the <code>Runner</code> object with no use anywhere (and was removed as dead code from this PR). It was <code>set</code> and nothing else checked it. Presumably it would be somehow passed on into a <code>RestartableJobDict</code> but there's no clear place where it would go since they are effectively queues with no obvious mechanism on how to exit gracefully themselves on a signal. It could be checked on the looping over training rounds but that might be too slow to wait for an entire EM iteration on a thread before exiting. Though that implementation might be desirable from a parameter iteration perspective and using segway-winner.</p>", "type": "rendered"}, "source": {"commit": {"hash": "23c97c52b364", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ericr86/segway/commit/23c97c52b364"}, "html": {"href": "https://bitbucket.org/ericr86/segway/commits/23c97c52b364"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ericr86/segway"}, "html": {"href": "https://bitbucket.org/ericr86/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e4afec35-c393-4c1b-9d35-155fcd95ef33}ts=python"}}, "type": "repository", "name": "segway", "full_name": "ericr86/segway", "uuid": "{e4afec35-c393-4c1b-9d35-155fcd95ef33}"}, "branch": {"name": "no-local-thread-sleep"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-13T13:21:53.251029+00:00", "author": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "merge_commit": {"hash": "492896b2d658", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/492896b2d658.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/492896b2d658"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "RestartableJobs are sorted on a heap by their memory requirements. This change allows sorting of these objects on themselves rather than a tuple of their sorting key and the object itself.\r\n\r\nPreviously if memory requirements matched it would attempt to sort of the last element of the tuple which was the object itself. Since the object itself was not comparable, a `TypeError` would occur:\r\n\r\n`TypeError: '<' not supported between instances of 'RestartableJob' and 'RestartableJob'`\r\n\r\nThis simply moves the sorting criterion into a `__lt__` operator and removes storing a tuple in the heap itself.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/104/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:a95dc6d332c4%0D492896b2d658?from_pullrequest_id=104"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/104/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/104.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/104/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/104/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/104"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/104/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:a95dc6d332c4%0D492896b2d658?from_pullrequest_id=104"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/104/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/104/statuses_page=1.json"}}, "title": "Add sorting capability to RestartableJob inside a heap", "close_source_branch": true, "type": "pullrequest", "id": 104, "destination": {"commit": {"hash": "492896b2d658", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/492896b2d658.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/492896b2d658"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-06-13T18:27:58.795981+00:00", "summary": {"raw": "RestartableJobs are sorted on a heap by their memory requirements. This change allows sorting of these objects on themselves rather than a tuple of their sorting key and the object itself.\r\n\r\nPreviously if memory requirements matched it would attempt to sort of the last element of the tuple which was the object itself. Since the object itself was not comparable, a `TypeError` would occur:\r\n\r\n`TypeError: '<' not supported between instances of 'RestartableJob' and 'RestartableJob'`\r\n\r\nThis simply moves the sorting criterion into a `__lt__` operator and removes storing a tuple in the heap itself.", "markup": "markdown", "html": "<p>RestartableJobs are sorted on a heap by their memory requirements. This change allows sorting of these objects on themselves rather than a tuple of their sorting key and the object itself.</p>\n<p>Previously if memory requirements matched it would attempt to sort of the last element of the tuple which was the object itself. Since the object itself was not comparable, a <code>TypeError</code> would occur:</p>\n<p><code>TypeError: '&lt;' not supported between instances of 'RestartableJob' and 'RestartableJob'</code></p>\n<p>This simply moves the sorting criterion into a <code>__lt__</code> operator and removes storing a tuple in the heap itself.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ff6858d94253", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ericr86/segway/commit/ff6858d94253"}, "html": {"href": "https://bitbucket.org/ericr86/segway/commits/ff6858d94253"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ericr86/segway"}, "html": {"href": "https://bitbucket.org/ericr86/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e4afec35-c393-4c1b-9d35-155fcd95ef33}ts=python"}}, "type": "repository", "name": "segway", "full_name": "ericr86/segway", "uuid": "{e4afec35-c393-4c1b-9d35-155fcd95ef33}"}, "branch": {"name": "restartable-job-sorting"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-21T13:26:37.359183+00:00", "author": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "merge_commit": {"hash": "a95dc6d332c4", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/a95dc6d332c4.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/a95dc6d332c4"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/105/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/mjmm13/segway_python23:776377c0eba5%0Df04cce0da8be?from_pullrequest_id=105"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/105/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/mjmm13/segway_python23:776377c0eba5%0Df04cce0da8be?from_pullrequest_id=105"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/105/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/statuses_page=1.json"}}, "title": "WIP PyGMTK input_master.py file", "close_source_branch": false, "type": "pullrequest", "id": 105, "destination": {"commit": {"hash": "f04cce0da8be", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/f04cce0da8be.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/f04cce0da8be"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-06-26T19:03:45.782915+00:00", "summary": {"raw": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "markup": "markdown", "html": "<h1 id=\"markdown-header-package-gmtk\">Package gmtk</h1>\n<p>gmtk</p>\n<p>Initially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created</p>\n<h2 id=\"markdown-header-module-gmtkinput95master\">Module gmtk.input_master</h2>\n<p>The overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.</p>\n<p>Keys: str representing a GMTK object types</p>\n<p>Values: some object with a __str__() method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.</p>\n<p>Implementation plan: Writing will be prioritized. Reading is later, if ever.</p>\n<h3 id=\"markdown-header-inputmaster-class\">InputMaster class</h3>\n<h4 id=\"markdown-header-class-gmtkinput95masterinputmaster\">class gmtk.input_master.InputMaster</h4>\n<p>subclass of: list</p>\n<p>items: object with a __str__() method. Mostly this will be either Section objects or hard-coded strs.</p>\n<p>There can be multiple instances of sections for an object type so this is a sequence (list) rather than a mapping (OrderedDict)</p>\n<p>__str__(self): return \u201c\\n\u201d.join(str(item) for item in self)</p>\n<h3 id=\"markdown-header-section-classes\">Section classes</h3>\n<h4 id=\"markdown-header-class-gmtkinput95mastersection\">class gmtk.input_master.Section</h4>\n<p>subclass of: collections.OrderedDict</p>\n<p>key: str (object name)</p>\n<p>value: an object with a __str__() method</p>\n<p>__str__(self): call self.kind() for its assertion purposes, render section beginning with the number of objects</p>\n<p>kind(self): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form [`type` and `class` are reserved for Python, and something like `object_type` is clunky]</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterinlinesection\">class gmtk.input_master.InlineSection</h4>\n<p>subclass of: Section</p>\n<p>only Section subclass slated for initial implementation</p>\n<p>__str__(self): render \u201c{self.kind()}_IN_FILE infile\\n\\n\u201d and then Section.__str__()</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterfilesection\">class gmtk.input_master.FileSection</h4>\n<p>subclass of: Section</p>\n<p>this and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.</p>\n<p>__init__(self, filename, items): raise NotImplementedError</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterasciifilesection\">class gmtk.input_master.ASCIIFileSection</h4>\n<p>subclass of: FileSection</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterbinaryfilesection\">class gmtk.input_master.BinaryFileSection</h4>\n<p>subclass of: FileSection</p>\n<h3 id=\"markdown-header-gmtk-object-classes\">GMTK Object classes</h3>\n<h4 id=\"markdown-header-class-gmtkinput95masterobject\">class gmtk.input_master.Object</h4>\n<p>subclass of str</p>\n<p>kind = None [class attribute that includes the GMTK name for this object class (e.g. DENSE_CPT)]</p>\n<p>__str__(): render object</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterarray\">class gmtk.input_master.Array</h4>\n<p>subclass of ndarray</p>\n<p>__new__(cls, *args, **kwargs):</p>\n<p>\u201c\u201d\u201d</p>\n<p>replace the more esoteric interface of numpy.ndarray.__new__() with the utility interface of numpy.array()</p>\n<p>\u201c\u201d\u201d</p>\n<p>return numpy.array(*args, **kwargs).view(cls)</p>\n<p>__str__(self): render object. For e.g. DenseCPT the # of parents is 1-len(self.shape), and cardinalities are all self.shape</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterdensecpt\">class gmtk.input_master.DenseCPT</h4>\n<p>subclass of Array</p>\n<p>kind = \u201cDENSE_CPT\u201d</p>\n<p>The first gmtk object that will be adapted is the DENSE_CPT. These are dense conditional probability tables of various sizes. An example rendering is:</p>\n<p>\u200c</p>\n<p>0 2 % # of parents, self cardinality</p>\n<p>0.5 0.5 % Probability Table</p>\n<p>\u200c</p>\n<p>[the index and object name are emitted by the Section object rather than the Object object]</p>\n<p>\u200c</p>\n<p>1 2 1 % # of parents, parent 0 cardinality, self cardinality</p>\n<p>1.0</p>\n<p>1.0</p>\n<p>The implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way</p>\n<h2 id=\"markdown-header-example-usage\">Example usage</h2>\n<p>Several different ways you can use this interface:</p>\n<p><code>from numpy import array</code></p>\n<p><code>from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean</code></p>\n<p><code>input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])</code></p>\n<p><code>input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])</code></p>\n<p><code>names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))</code></p>\n<p><code>input_master.append(InlineSection(names_dict))</code></p>", "type": "rendered"}, "source": {"commit": {"hash": "776377c0eba5", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/776377c0eba5"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/776377c0eba5"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "comment_count": 51, "state": "OPEN", "task_count": 0, "reason": "", "updated_on": "2019-10-10T16:27:17.320467+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": null, "closed_by": null}, {"description": "Contains fixes for the test cases for the new API, as well as fixing an introduced bug causing Segway to behave differently at none 1 resolutions.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/106/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:284a52ef6e86%0D4e3898f31fb7?from_pullrequest_id=106"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/106/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/106.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/106/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/106/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/106"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/106/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:284a52ef6e86%0D4e3898f31fb7?from_pullrequest_id=106"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/106/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/106/statuses_page=1.json"}}, "title": "Fix Test Cases For New API", "close_source_branch": false, "type": "pullrequest", "id": 106, "destination": {"commit": {"hash": "4e3898f31fb7", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/4e3898f31fb7.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/4e3898f31fb7"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-07-02T21:00:20.593151+00:00", "summary": {"raw": "Contains fixes for the test cases for the new API, as well as fixing an introduced bug causing Segway to behave differently at none 1 resolutions.", "markup": "markdown", "html": "<p>Contains fixes for the test cases for the new API, as well as fixing an introduced bug causing Segway to behave differently at none 1 resolutions.</p>", "type": "rendered"}, "source": {"commit": {"hash": "0cc147fa4e45", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/0cc147fa4e45"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/0cc147fa4e45"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "step_split"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-03T15:22:41.488573+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": {"hash": "284a52ef6e86", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/284a52ef6e86.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/284a52ef6e86"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/107/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:c8269623efb3%0D792d50375d96?from_pullrequest_id=107"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/107/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/107.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/107/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/107/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/107"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/107/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:c8269623efb3%0D792d50375d96?from_pullrequest_id=107"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/107/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/107/statuses_page=1.json"}}, "title": "Updated documentation for new API", "close_source_branch": false, "type": "pullrequest", "id": 107, "destination": {"commit": {"hash": "792d50375d96", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/792d50375d96.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/792d50375d96"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-07-08T15:21:47.768007+00:00", "summary": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "source": {"commit": {"hash": "c8269623efb3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/c8269623efb3"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/c8269623efb3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "default"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-12T14:24:39.771626+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": {"hash": "c8269623efb3", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/c8269623efb3.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/c8269623efb3"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "Now, the help interface for segway -h will be:\r\n\r\n\u200c\r\n\r\n```\r\nusage:\r\n\r\nSemi-automated genome annotation. Please see: segway TASK -h, for stepsspecific to each task\r\n\r\noptional arguments:-h, --help            show this help message and exit\r\n                   --version             show program's version number and exit\r\n\r\nSegway Commands:\r\nList of available tasks:\r\n\r\ntrain\r\n| -- train-init\r\n| -- train-run\r\n|\t| -- train-run-round\r\n| -- train-finish\r\n\r\nannotate\r\n| -- annotate-init\r\n| -- annotate-run\r\n| -- annotate-finish\r\n\r\nposterior\r\n| -- posterior-init\r\n| -- posterior-run\r\n| -- posterior-finish\r\n```\r\n\r\nWhile the segway annotate -h message will be:\r\n\r\n```\r\nusage:  annotate [-h] [-c] [--include-coords FILE] [--exclude-coords FILE][--output-label OUTPUT_LABEL] [--seg-table FILE] [-b FILE][--bigBed FILE]archives [archives ...] traindir annotatedir\r\n\r\npositional arguments:\r\n    archives\r\n    traindir\r\n    annotatedir\r\n\r\noptional arguments:-h, --help            show this help message and exit\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/108/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/mjmm13/segway_python23:1b07171e2e14%0De035d27fc406?from_pullrequest_id=108"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/108/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/108.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/108/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/108/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/108"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/108/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/mjmm13/segway_python23:1b07171e2e14%0De035d27fc406?from_pullrequest_id=108"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/108/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/108/statuses_page=1.json"}}, "title": "Changed help interface for segway -h and segway annotate -h", "close_source_branch": false, "type": "pullrequest", "id": 108, "destination": {"commit": {"hash": "e035d27fc406", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e035d27fc406.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e035d27fc406"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-07-12T14:30:35.581039+00:00", "summary": {"raw": "Now, the help interface for segway -h will be:\r\n\r\n\u200c\r\n\r\n```\r\nusage:\r\n\r\nSemi-automated genome annotation. Please see: segway TASK -h, for stepsspecific to each task\r\n\r\noptional arguments:-h, --help            show this help message and exit\r\n                   --version             show program's version number and exit\r\n\r\nSegway Commands:\r\nList of available tasks:\r\n\r\ntrain\r\n| -- train-init\r\n| -- train-run\r\n|\t| -- train-run-round\r\n| -- train-finish\r\n\r\nannotate\r\n| -- annotate-init\r\n| -- annotate-run\r\n| -- annotate-finish\r\n\r\nposterior\r\n| -- posterior-init\r\n| -- posterior-run\r\n| -- posterior-finish\r\n```\r\n\r\nWhile the segway annotate -h message will be:\r\n\r\n```\r\nusage:  annotate [-h] [-c] [--include-coords FILE] [--exclude-coords FILE][--output-label OUTPUT_LABEL] [--seg-table FILE] [-b FILE][--bigBed FILE]archives [archives ...] traindir annotatedir\r\n\r\npositional arguments:\r\n    archives\r\n    traindir\r\n    annotatedir\r\n\r\noptional arguments:-h, --help            show this help message and exit\r\n```", "markup": "markdown", "html": "<p>Now, the help interface for segway -h will be:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nn\">usage</span><span class=\"p\">:</span>\n\n<span class=\"nv\">Semi</span><span class=\"o\">-</span><span class=\"s s-Atom\">automated</span> <span class=\"s s-Atom\">genome</span> <span class=\"s s-Atom\">annotation</span><span class=\"p\">.</span> <span class=\"nv\">Please</span> <span class=\"nn\">see</span><span class=\"p\">:</span> <span class=\"s s-Atom\">segway</span> <span class=\"nv\">TASK</span> <span class=\"o\">-</span><span class=\"s s-Atom\">h</span><span class=\"p\">,</span> <span class=\"s s-Atom\">for</span> <span class=\"s s-Atom\">stepsspecific</span> <span class=\"s s-Atom\">to</span> <span class=\"s s-Atom\">each</span> <span class=\"s s-Atom\">task</span>\n\n<span class=\"s s-Atom\">optional</span> <span class=\"nn\">arguments</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"s s-Atom\">h</span><span class=\"p\">,</span> <span class=\"s s-Atom\">--help</span>            <span class=\"s s-Atom\">show</span> <span class=\"s s-Atom\">this</span> <span class=\"s s-Atom\">help</span> <span class=\"s s-Atom\">message</span> <span class=\"s s-Atom\">and</span> <span class=\"s s-Atom\">exit</span>\n                   <span class=\"s s-Atom\">--version</span>             <span class=\"s s-Atom\">show</span> <span class=\"s s-Atom\">program</span><span class=\"err\">&#39;</span><span class=\"s s-Atom\">s</span> <span class=\"s s-Atom\">version</span> <span class=\"s s-Atom\">number</span> <span class=\"s s-Atom\">and</span> <span class=\"s s-Atom\">exit</span>\n\n<span class=\"nv\">Segway</span> <span class=\"nv\">Commands</span><span class=\"s s-Atom\">:</span>\n<span class=\"nv\">List</span> <span class=\"s s-Atom\">of</span> <span class=\"s s-Atom\">available</span> <span class=\"nn\">tasks</span><span class=\"p\">:</span>\n\n<span class=\"s s-Atom\">train</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">train</span><span class=\"o\">-</span><span class=\"s s-Atom\">init</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">train</span><span class=\"o\">-</span><span class=\"s s-Atom\">run</span>\n<span class=\"p\">|</span>   <span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">train</span><span class=\"o\">-</span><span class=\"s s-Atom\">run</span><span class=\"o\">-</span><span class=\"s s-Atom\">round</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">train</span><span class=\"o\">-</span><span class=\"s s-Atom\">finish</span>\n\n<span class=\"s s-Atom\">annotate</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">annotate</span><span class=\"o\">-</span><span class=\"s s-Atom\">init</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">annotate</span><span class=\"o\">-</span><span class=\"s s-Atom\">run</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">annotate</span><span class=\"o\">-</span><span class=\"s s-Atom\">finish</span>\n\n<span class=\"s s-Atom\">posterior</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">posterior</span><span class=\"o\">-</span><span class=\"s s-Atom\">init</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">posterior</span><span class=\"o\">-</span><span class=\"s s-Atom\">run</span>\n<span class=\"p\">|</span> <span class=\"s s-Atom\">--</span> <span class=\"s s-Atom\">posterior</span><span class=\"o\">-</span><span class=\"s s-Atom\">finish</span>\n</pre></div>\n\n\n<p>While the segway annotate -h message will be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nn\">usage</span><span class=\"p\">:</span>  <span class=\"s s-Atom\">annotate</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"s s-Atom\">h</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"s s-Atom\">c</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s s-Atom\">--include</span><span class=\"o\">-</span><span class=\"s s-Atom\">coords</span> <span class=\"nv\">FILE</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s s-Atom\">--exclude</span><span class=\"o\">-</span><span class=\"s s-Atom\">coords</span> <span class=\"nv\">FILE</span><span class=\"p\">][</span><span class=\"s s-Atom\">--output</span><span class=\"o\">-</span><span class=\"s s-Atom\">label</span> <span class=\"nv\">OUTPUT_LABEL</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s s-Atom\">--seg</span><span class=\"o\">-</span><span class=\"s s-Atom\">table</span> <span class=\"nv\">FILE</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"s s-Atom\">b</span> <span class=\"nv\">FILE</span><span class=\"p\">][</span><span class=\"s s-Atom\">--bigBed</span> <span class=\"nv\">FILE</span><span class=\"p\">]</span><span class=\"s s-Atom\">archives</span> <span class=\"p\">[</span><span class=\"s s-Atom\">archives</span> <span class=\"p\">...]</span> <span class=\"s s-Atom\">traindir</span> <span class=\"s s-Atom\">annotatedir</span>\n\n<span class=\"s s-Atom\">positional</span> <span class=\"nn\">arguments</span><span class=\"p\">:</span>\n    <span class=\"s s-Atom\">archives</span>\n    <span class=\"s s-Atom\">traindir</span>\n    <span class=\"s s-Atom\">annotatedir</span>\n\n<span class=\"s s-Atom\">optional</span> <span class=\"nn\">arguments</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"s s-Atom\">h</span><span class=\"p\">,</span> <span class=\"s s-Atom\">--help</span>            <span class=\"s s-Atom\">show</span> <span class=\"s s-Atom\">this</span> <span class=\"s s-Atom\">help</span> <span class=\"s s-Atom\">message</span> <span class=\"s s-Atom\">and</span> <span class=\"s s-Atom\">exit</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "1b07171e2e14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/1b07171e2e14"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/1b07171e2e14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "help_interface"}}, "comment_count": 0, "state": "DECLINED", "task_count": 0, "reason": "Mistaken garbage pull request. Covered by pull request #109.", "updated_on": "2019-07-12T14:43:57.166130+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": null, "closed_by": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}}, {"description": "* Now, the help interface for segway -h will be:\r\n\r\n```\r\nusage: segway [global_args] COMMAND [args]...\r\n\r\nSegmentation and automated genome annotation.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --version             show program's version number and exit\r\n\r\nlist of commands:\r\n  \r\ntrain\t\t\tRuns gmtkEMtrain on specified genomedata archive(s)\r\n- train-init\t\tSets up directory structure and generates all gmtk input files\r\n- train-run\t\tRuns training to completion or to a specified number of iterations\r\n-- train-run-round\tRuns a single round of training\r\n- train-finish\t\tSelects best training instance and generates output master and params files\r\n\r\nannotate\t\tRuns gmtkViterbi on given archives and training directory, provides labels to entire genome\r\n- annotate-init\t\tSets up directory structure and generates all gmtk input files\r\n- annotate-run\t\tSubmits jobs to Viterbi\r\n- annotate-finish\tCompiles all viterbi output files together into a single bed file for all labels\r\n\r\nposterior\t\tRuns gmtkJT and produces prior probability of each label at each index\r\n- posterior-init\tSets up directory structure and generates all gmtk input files\r\n- posterior-run\t\tSubmits jonbs to JT\r\n- posterior-finish\tCompiles all output posterior files, and produces a bed file for each label\r\n\r\nUse `segway COMMAND --help`, for help specific to each command.\r\n```\r\n\r\nWhile the segway annotate -h message will be:\r\n\r\n```\r\nusage:  segway annotate [args] GENOMEDATA TRAINDIR ANNOTATEDIR\r\n\r\npositional arguments:\r\n    archives\r\n    traindir\r\n    annotatedir\r\n\r\noptional arguments:-h, --help            show this help message and exit\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/109/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:0511330c5338%0D05ab48931538?from_pullrequest_id=109"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/109/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/109.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/109/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/109/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/109"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/109/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:0511330c5338%0D05ab48931538?from_pullrequest_id=109"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/109/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/109/statuses_page=1.json"}}, "title": "Fix help messages generated by segway -h and segway annotate -h", "close_source_branch": false, "type": "pullrequest", "id": 109, "destination": {"commit": {"hash": "05ab48931538", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/05ab48931538.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/05ab48931538"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-07-12T14:37:08.663883+00:00", "summary": {"raw": "* Now, the help interface for segway -h will be:\r\n\r\n```\r\nusage: segway [global_args] COMMAND [args]...\r\n\r\nSegmentation and automated genome annotation.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --version             show program's version number and exit\r\n\r\nlist of commands:\r\n  \r\ntrain\t\t\tRuns gmtkEMtrain on specified genomedata archive(s)\r\n- train-init\t\tSets up directory structure and generates all gmtk input files\r\n- train-run\t\tRuns training to completion or to a specified number of iterations\r\n-- train-run-round\tRuns a single round of training\r\n- train-finish\t\tSelects best training instance and generates output master and params files\r\n\r\nannotate\t\tRuns gmtkViterbi on given archives and training directory, provides labels to entire genome\r\n- annotate-init\t\tSets up directory structure and generates all gmtk input files\r\n- annotate-run\t\tSubmits jobs to Viterbi\r\n- annotate-finish\tCompiles all viterbi output files together into a single bed file for all labels\r\n\r\nposterior\t\tRuns gmtkJT and produces prior probability of each label at each index\r\n- posterior-init\tSets up directory structure and generates all gmtk input files\r\n- posterior-run\t\tSubmits jonbs to JT\r\n- posterior-finish\tCompiles all output posterior files, and produces a bed file for each label\r\n\r\nUse `segway COMMAND --help`, for help specific to each command.\r\n```\r\n\r\nWhile the segway annotate -h message will be:\r\n\r\n```\r\nusage:  segway annotate [args] GENOMEDATA TRAINDIR ANNOTATEDIR\r\n\r\npositional arguments:\r\n    archives\r\n    traindir\r\n    annotatedir\r\n\r\noptional arguments:-h, --help            show this help message and exit\r\n```", "markup": "markdown", "html": "<ul>\n<li>Now, the help interface for segway -h will be:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">usage</span><span class=\"o\">:</span> <span class=\"n\">segway</span> <span class=\"o\">[</span><span class=\"n\">global_args</span><span class=\"o\">]</span> <span class=\"n\">COMMAND</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"o\">]...</span>\n\n<span class=\"n\">Segmentation</span> <span class=\"n\">and</span> <span class=\"n\">automated</span> <span class=\"n\">genome</span> <span class=\"n\">annotation</span><span class=\"o\">.</span>\n\n<span class=\"n\">optional</span> <span class=\"k\">arguments</span><span class=\"o\">:</span>\n  <span class=\"o\">-</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">--</span><span class=\"n\">help</span>            <span class=\"n\">show</span> <span class=\"k\">this</span> <span class=\"n\">help</span> <span class=\"n\">message</span> <span class=\"n\">and</span> <span class=\"n\">exit</span>\n  <span class=\"o\">--</span><span class=\"n\">version</span>             <span class=\"n\">show</span> <span class=\"n\">program</span><span class=\"err\">&#39;</span><span class=\"n\">s</span> <span class=\"n\">version</span> <span class=\"n\">number</span> <span class=\"n\">and</span> <span class=\"n\">exit</span>\n\n<span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">commands</span><span class=\"o\">:</span>\n\n<span class=\"n\">train</span>           <span class=\"n\">Runs</span> <span class=\"n\">gmtkEMtrain</span> <span class=\"n\">on</span> <span class=\"n\">specified</span> <span class=\"n\">genomedata</span> <span class=\"n\">archive</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">-</span> <span class=\"n\">train</span><span class=\"o\">-</span><span class=\"n\">init</span>        <span class=\"n\">Sets</span> <span class=\"n\">up</span> <span class=\"n\">directory</span> <span class=\"n\">structure</span> <span class=\"n\">and</span> <span class=\"n\">generates</span> <span class=\"n\">all</span> <span class=\"n\">gmtk</span> <span class=\"n\">input</span> <span class=\"n\">files</span>\n<span class=\"o\">-</span> <span class=\"n\">train</span><span class=\"o\">-</span><span class=\"n\">run</span>     <span class=\"n\">Runs</span> <span class=\"n\">training</span> <span class=\"n\">to</span> <span class=\"n\">completion</span> <span class=\"n\">or</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">specified</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">iterations</span>\n<span class=\"o\">--</span> <span class=\"n\">train</span><span class=\"o\">-</span><span class=\"n\">run</span><span class=\"o\">-</span><span class=\"n\">round</span>  <span class=\"n\">Runs</span> <span class=\"n\">a</span> <span class=\"n\">single</span> <span class=\"n\">round</span> <span class=\"n\">of</span> <span class=\"n\">training</span>\n<span class=\"o\">-</span> <span class=\"n\">train</span><span class=\"o\">-</span><span class=\"n\">finish</span>      <span class=\"n\">Selects</span> <span class=\"n\">best</span> <span class=\"n\">training</span> <span class=\"n\">instance</span> <span class=\"n\">and</span> <span class=\"n\">generates</span> <span class=\"n\">output</span> <span class=\"n\">master</span> <span class=\"n\">and</span> <span class=\"n\">params</span> <span class=\"n\">files</span>\n\n<span class=\"n\">annotate</span>        <span class=\"n\">Runs</span> <span class=\"n\">gmtkViterbi</span> <span class=\"n\">on</span> <span class=\"n\">given</span> <span class=\"n\">archives</span> <span class=\"n\">and</span> <span class=\"n\">training</span> <span class=\"n\">directory</span><span class=\"o\">,</span> <span class=\"n\">provides</span> <span class=\"n\">labels</span> <span class=\"n\">to</span> <span class=\"n\">entire</span> <span class=\"n\">genome</span>\n<span class=\"o\">-</span> <span class=\"n\">annotate</span><span class=\"o\">-</span><span class=\"n\">init</span>     <span class=\"n\">Sets</span> <span class=\"n\">up</span> <span class=\"n\">directory</span> <span class=\"n\">structure</span> <span class=\"n\">and</span> <span class=\"n\">generates</span> <span class=\"n\">all</span> <span class=\"n\">gmtk</span> <span class=\"n\">input</span> <span class=\"n\">files</span>\n<span class=\"o\">-</span> <span class=\"n\">annotate</span><span class=\"o\">-</span><span class=\"n\">run</span>      <span class=\"n\">Submits</span> <span class=\"n\">jobs</span> <span class=\"n\">to</span> <span class=\"n\">Viterbi</span>\n<span class=\"o\">-</span> <span class=\"n\">annotate</span><span class=\"o\">-</span><span class=\"n\">finish</span>   <span class=\"n\">Compiles</span> <span class=\"n\">all</span> <span class=\"n\">viterbi</span> <span class=\"n\">output</span> <span class=\"n\">files</span> <span class=\"n\">together</span> <span class=\"n\">into</span> <span class=\"n\">a</span> <span class=\"n\">single</span> <span class=\"n\">bed</span> <span class=\"n\">file</span> <span class=\"k\">for</span> <span class=\"n\">all</span> <span class=\"n\">labels</span>\n\n<span class=\"n\">posterior</span>       <span class=\"n\">Runs</span> <span class=\"n\">gmtkJT</span> <span class=\"n\">and</span> <span class=\"n\">produces</span> <span class=\"n\">prior</span> <span class=\"n\">probability</span> <span class=\"n\">of</span> <span class=\"k\">each</span> <span class=\"n\">label</span> <span class=\"n\">at</span> <span class=\"k\">each</span> <span class=\"n\">index</span>\n<span class=\"o\">-</span> <span class=\"n\">posterior</span><span class=\"o\">-</span><span class=\"n\">init</span>    <span class=\"n\">Sets</span> <span class=\"n\">up</span> <span class=\"n\">directory</span> <span class=\"n\">structure</span> <span class=\"n\">and</span> <span class=\"n\">generates</span> <span class=\"n\">all</span> <span class=\"n\">gmtk</span> <span class=\"n\">input</span> <span class=\"n\">files</span>\n<span class=\"o\">-</span> <span class=\"n\">posterior</span><span class=\"o\">-</span><span class=\"n\">run</span>     <span class=\"n\">Submits</span> <span class=\"n\">jonbs</span> <span class=\"n\">to</span> <span class=\"n\">JT</span>\n<span class=\"o\">-</span> <span class=\"n\">posterior</span><span class=\"o\">-</span><span class=\"n\">finish</span>  <span class=\"n\">Compiles</span> <span class=\"n\">all</span> <span class=\"n\">output</span> <span class=\"n\">posterior</span> <span class=\"n\">files</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">produces</span> <span class=\"n\">a</span> <span class=\"n\">bed</span> <span class=\"n\">file</span> <span class=\"k\">for</span> <span class=\"k\">each</span> <span class=\"n\">label</span>\n\n<span class=\"n\">Use</span> <span class=\"err\">`</span><span class=\"n\">segway</span> <span class=\"n\">COMMAND</span> <span class=\"o\">--</span><span class=\"n\">help</span><span class=\"err\">`</span><span class=\"o\">,</span> <span class=\"k\">for</span> <span class=\"n\">help</span> <span class=\"n\">specific</span> <span class=\"n\">to</span> <span class=\"k\">each</span> <span class=\"n\">command</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>While the segway annotate -h message will be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nn\">usage</span><span class=\"p\">:</span>  <span class=\"s s-Atom\">segway</span> <span class=\"s s-Atom\">annotate</span> <span class=\"p\">[</span><span class=\"s s-Atom\">args</span><span class=\"p\">]</span> <span class=\"nv\">GENOMEDATA</span> <span class=\"nv\">TRAINDIR</span> <span class=\"nv\">ANNOTATEDIR</span>\n\n<span class=\"s s-Atom\">positional</span> <span class=\"nn\">arguments</span><span class=\"p\">:</span>\n    <span class=\"s s-Atom\">archives</span>\n    <span class=\"s s-Atom\">traindir</span>\n    <span class=\"s s-Atom\">annotatedir</span>\n\n<span class=\"s s-Atom\">optional</span> <span class=\"nn\">arguments</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"s s-Atom\">h</span><span class=\"p\">,</span> <span class=\"s s-Atom\">--help</span>            <span class=\"s s-Atom\">show</span> <span class=\"s s-Atom\">this</span> <span class=\"s s-Atom\">help</span> <span class=\"s s-Atom\">message</span> <span class=\"s s-Atom\">and</span> <span class=\"s s-Atom\">exit</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "0511330c5338", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/0511330c5338"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/0511330c5338"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "default"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-28T16:21:15.892510+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": {"hash": "0511330c5338", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/0511330c5338.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/0511330c5338"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "Keeps the current 3600 max job query lifetime for all clusters and changes SLURM to a default of 300\\*0.9 since the default MinJobAge is 300 seconds.\r\n\r\nAddresses Issue #134 by fixing the core issue of polling expired jobs.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/110/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/hoffmanlab/segway:e296818322be%0De035d27fc406?from_pullrequest_id=110"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/110/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/110.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/110/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/110/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/110"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/110/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/hoffmanlab/segway:e296818322be%0De035d27fc406?from_pullrequest_id=110"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/110/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/110/statuses_page=1.json"}}, "title": "Add cluster specific maximum job polling time", "close_source_branch": true, "type": "pullrequest", "id": 110, "destination": {"commit": {"hash": "e035d27fc406", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e035d27fc406.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e035d27fc406"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-07-26T16:17:02.735936+00:00", "summary": {"raw": "Keeps the current 3600 max job query lifetime for all clusters and changes SLURM to a default of 300\\*0.9 since the default MinJobAge is 300 seconds.\r\n\r\nAddresses Issue #134 by fixing the core issue of polling expired jobs.", "markup": "markdown", "html": "<p>Keeps the current 3600 max job query lifetime for all clusters and changes SLURM to a default of 300*0.9 since the default MinJobAge is 300 seconds.</p>\n<p>Addresses Issue <a href=\"#!/hoffmanlab/segway/issues/134/error-codes-on-slurm\" rel=\"nofollow\" title=\"Error codes on SLURM\" class=\"ap-connect-link\"><s>#134</s></a> by fixing the core issue of polling expired jobs.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4cd4bbaa76cc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ericr86/segway/commit/4cd4bbaa76cc"}, "html": {"href": "https://bitbucket.org/ericr86/segway/commits/4cd4bbaa76cc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ericr86/segway"}, "html": {"href": "https://bitbucket.org/ericr86/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e4afec35-c393-4c1b-9d35-155fcd95ef33}ts=python"}}, "type": "repository", "name": "segway", "full_name": "ericr86/segway", "uuid": "{e4afec35-c393-4c1b-9d35-155fcd95ef33}"}, "branch": {"name": "cluster-job-query-time"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-26T20:09:14.207444+00:00", "author": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "merge_commit": {"hash": "e296818322be", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e296818322be.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e296818322be"}}}, "closed_by": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}, {"description": "#### Introduction\r\n\r\nThis pull request modifies Segway\u2019s scheduling to allow for jobs to be submitted in \u2018batches\u2019 \\(defined hereon as \u2018a large script containing the segway-task commands of one or more smaller jobs\u2019\\) in a minimally invasive way for training jobs \\(non-bundle\\).\r\n\r\n#### Why\r\n\r\nDepending on the data, Segway\u2019s EM train jobs can often run very quickly \\(< 10 seconds\\). In these cases, a lot of the walltime is overhead from scheduling, which is highly undesirable. In addition, cluster systems often have strict rules about running many small jobs that would prevent some users from running Segway. The addition of an option for \u2018batch\u2019 scheduling should hopefully eliminate many of these issues.\r\n\r\n#### How to use\r\n\r\nTo enable this behavior, the user must specify `--jobs-per-batch` to be greater than 1. If `--jobs-per-batch=1` then we recover default, unbatched behavior \\(each segway-wrapper command \\(aka 'subjob'\\) is its own cluster job/script\\).\r\n\r\n#### Code changes\r\n\r\nThe primary changes are in `queue_train_parallel`. Here, I compute the expected number of batches \\(given `--jobs-per-batch`\\) and distribute the train windows in the current round into batches of maximum size `--jobs-per-batch`. In each batch, each subjob writes its segway-task command to a separate job script \\(as usual\\). After we write the job script of the final subjob in the batch, I accumulate all the subjob scripts into one large batch script file at once, after which the batch script is submitted as a job as usual.\r\n\r\n#### Possible issues\r\n\r\nThings that would be good to sanity check in case I\u2019ve made a mistake somewhere:\r\n\r\n* Since `queue_task` is reused by other functions \\(such as viterbi\\), we should be careful it retains the old behavior for these other functions.\r\n* I\u2019ve checked that the logic for the unbatched case is effectively the same as previous behavior, but this should be verified by someone else as well.\r\n\r\nSome things I don\u2019t know how to fix:\r\n\r\n* There doesn't seem to be a good way to check if the current job is a bundle job without checking if `subjob_index=None`.\r\n* My method of checking if we expect batched or unbatched behavior is not super elegant \\(checking if jobs per batch!=1, subjob\\_index is not None, etc\\).\r\n\r\n@{557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee} I have tried this PR locally using simpleseg \\(with various split-seq and jobs-per-batch options specified\\). After a first pass/sanity check, I will try it on the cluster. Thanks!", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/111/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/rcwchan/segway-1:5c3ba8021f9e%0Df04cce0da8be?from_pullrequest_id=111"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/111/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/111.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/111/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/111/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/111"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/111/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/rcwchan/segway-1:5c3ba8021f9e%0Df04cce0da8be?from_pullrequest_id=111"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/111/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/111/statuses_page=1.json"}}, "title": "Modify Segway's scheduling to allow for 'batch' job submission in training", "close_source_branch": false, "type": "pullrequest", "id": 111, "destination": {"commit": {"hash": "f04cce0da8be", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/f04cce0da8be.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/f04cce0da8be"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-08-21T14:41:40.650965+00:00", "summary": {"raw": "#### Introduction\r\n\r\nThis pull request modifies Segway\u2019s scheduling to allow for jobs to be submitted in \u2018batches\u2019 \\(defined hereon as \u2018a large script containing the segway-task commands of one or more smaller jobs\u2019\\) in a minimally invasive way for training jobs \\(non-bundle\\).\r\n\r\n#### Why\r\n\r\nDepending on the data, Segway\u2019s EM train jobs can often run very quickly \\(< 10 seconds\\). In these cases, a lot of the walltime is overhead from scheduling, which is highly undesirable. In addition, cluster systems often have strict rules about running many small jobs that would prevent some users from running Segway. The addition of an option for \u2018batch\u2019 scheduling should hopefully eliminate many of these issues.\r\n\r\n#### How to use\r\n\r\nTo enable this behavior, the user must specify `--jobs-per-batch` to be greater than 1. If `--jobs-per-batch=1` then we recover default, unbatched behavior \\(each segway-wrapper command \\(aka 'subjob'\\) is its own cluster job/script\\).\r\n\r\n#### Code changes\r\n\r\nThe primary changes are in `queue_train_parallel`. Here, I compute the expected number of batches \\(given `--jobs-per-batch`\\) and distribute the train windows in the current round into batches of maximum size `--jobs-per-batch`. In each batch, each subjob writes its segway-task command to a separate job script \\(as usual\\). After we write the job script of the final subjob in the batch, I accumulate all the subjob scripts into one large batch script file at once, after which the batch script is submitted as a job as usual.\r\n\r\n#### Possible issues\r\n\r\nThings that would be good to sanity check in case I\u2019ve made a mistake somewhere:\r\n\r\n* Since `queue_task` is reused by other functions \\(such as viterbi\\), we should be careful it retains the old behavior for these other functions.\r\n* I\u2019ve checked that the logic for the unbatched case is effectively the same as previous behavior, but this should be verified by someone else as well.\r\n\r\nSome things I don\u2019t know how to fix:\r\n\r\n* There doesn't seem to be a good way to check if the current job is a bundle job without checking if `subjob_index=None`.\r\n* My method of checking if we expect batched or unbatched behavior is not super elegant \\(checking if jobs per batch!=1, subjob\\_index is not None, etc\\).\r\n\r\n@{557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee} I have tried this PR locally using simpleseg \\(with various split-seq and jobs-per-batch options specified\\). After a first pass/sanity check, I will try it on the cluster. Thanks!", "markup": "markdown", "html": "<h4 id=\"markdown-header-introduction\">Introduction</h4>\n<p>This pull request modifies Segway\u2019s scheduling to allow for jobs to be submitted in \u2018batches\u2019 (defined hereon as \u2018a large script containing the segway-task commands of one or more smaller jobs\u2019) in a minimally invasive way for training jobs (non-bundle).</p>\n<h4 id=\"markdown-header-why\">Why</h4>\n<p>Depending on the data, Segway\u2019s EM train jobs can often run very quickly (&lt; 10 seconds). In these cases, a lot of the walltime is overhead from scheduling, which is highly undesirable. In addition, cluster systems often have strict rules about running many small jobs that would prevent some users from running Segway. The addition of an option for \u2018batch\u2019 scheduling should hopefully eliminate many of these issues.</p>\n<h4 id=\"markdown-header-how-to-use\">How to use</h4>\n<p>To enable this behavior, the user must specify <code>--jobs-per-batch</code> to be greater than 1. If <code>--jobs-per-batch=1</code> then we recover default, unbatched behavior (each segway-wrapper command (aka 'subjob') is its own cluster job/script).</p>\n<h4 id=\"markdown-header-code-changes\">Code changes</h4>\n<p>The primary changes are in <code>queue_train_parallel</code>. Here, I compute the expected number of batches (given <code>--jobs-per-batch</code>) and distribute the train windows in the current round into batches of maximum size <code>--jobs-per-batch</code>. In each batch, each subjob writes its segway-task command to a separate job script (as usual). After we write the job script of the final subjob in the batch, I accumulate all the subjob scripts into one large batch script file at once, after which the batch script is submitted as a job as usual.</p>\n<h4 id=\"markdown-header-possible-issues\">Possible issues</h4>\n<p>Things that would be good to sanity check in case I\u2019ve made a mistake somewhere:</p>\n<ul>\n<li>Since <code>queue_task</code> is reused by other functions (such as viterbi), we should be careful it retains the old behavior for these other functions.</li>\n<li>I\u2019ve checked that the logic for the unbatched case is effectively the same as previous behavior, but this should be verified by someone else as well.</li>\n</ul>\n<p>Some things I don\u2019t know how to fix:</p>\n<ul>\n<li>There doesn't seem to be a good way to check if the current job is a bundle job without checking if <code>subjob_index=None</code>.</li>\n<li>My method of checking if we expect batched or unbatched behavior is not super elegant (checking if jobs per batch!=1, subjob_index is not None, etc).</li>\n</ul>\n<p><span class=\"ap-mention ap-mention-me\" data-atlassian-id=\"557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee\">@Eric Roberts</span> I have tried this PR locally using simpleseg (with various split-seq and jobs-per-batch options specified). After a first pass/sanity check, I will try it on the cluster. Thanks!</p>", "type": "rendered"}, "source": {"commit": {"hash": "5c3ba8021f9e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/segway-1/commit/5c3ba8021f9e"}, "html": {"href": "https://bitbucket.org/rcwchan/segway-1/commits/5c3ba8021f9e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rcwchan/segway-1"}, "html": {"href": "https://bitbucket.org/rcwchan/segway-1"}, "avatar": {"href": "data/bytebucket.org/ravatar/{cfe37561-5057-4cfe-911c-557786e4580b}ts=python"}}, "type": "repository", "name": "segway-1", "full_name": "rcwchan/segway-1", "uuid": "{cfe37561-5057-4cfe-911c-557786e4580b}"}, "branch": {"name": "batch_job_submission"}}, "comment_count": 9, "state": "OPEN", "task_count": 0, "reason": "", "updated_on": "2019-09-13T20:16:13.921895+00:00", "author": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "merge_commit": null, "closed_by": null}], "page": 3, "size": 111}