{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "links": {"attachments": {"href": "data/repositories/hoffmanlab/segway/issues/113/attachments_page=1.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/issues/113.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/issues/113/watch"}, "comments": {"href": "data/repositories/hoffmanlab/segway/issues/113/comments_page=1.json"}, "html": {"href": "#!/hoffmanlab/segway/issues/113/accounting-for-gaussian-components"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/issues/113/vote"}}, "reporter": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "title": "Accounting for Gaussian components vanishing upon reaching 0 probability mass", "component": null, "votes": 0, "watches": 1, "content": {"raw": "From @mlibbrecht :\r\n\r\n\"Michael L and I recently identified a bug in the current mixtures of Gaussians implementation.\r\n\r\nThe bug is triggered when any one mixture component receives zero probability mass in EM. When this happens, GMTK \"vanishes\" that component; that is, it does not output a mean parameter for it. This causes the next round of training to fail, because the params file is now missing one of the parameters that it's supposed to have.\r\n\r\nThere is a very simple fix that Jeff helped me find (thanks, Jeff!). The fix is to move some parameters that used to be in the input.master file into the params.X.params.Y files. That way, GMTK can change the Gaussian to have (for example) two components rather than three, and everything will work after that. Currently, the input.master file has the structure:\r\n\r\n\r\n```\r\n#!C\r\n\r\n#ifndef INPUT_PARAMS_FILENAME\r\nDENSE_CPT_IN_FILE inline \r\n<initial parameter values>\r\nMEAN_IN_FILE inline\r\n<initial parameter values>\r\nCOVAR_IN_FILE inline\r\n<initial parameter values>\r\n#else\r\nDENSE_CPT_IN_FILE INPUT_PARAMS_FILENAME ascii\r\nMEAN_IN_FILE INPUT_PARAMS_FILENAME ascii\r\nCOVAR_IN_FILE INPUT_PARAMS_FILENAME ascii\r\n#endif\r\n```\r\n\r\n\r\nThis structure causes GMTK to read the initial values at the first iteration (when INPUT_PARAMS_FILENAME is not set on the command line), and values from params.X.params.Y files in subsequent iterations. The fix for the bug is just to move some parameters from outside the #ifndef to inside it. Specifically, I think we need to move the DPMF parameters starting with \"DPMF_IN_FILE inline\" inside the #ifndef structure.                                                                                                                                             \r\n\r\nYou can get an example at this link \r\n```\r\n#!C\r\n\r\n[redacted]\r\n```\r\n\r\n\r\nThe offending gmtkEMtrain command occurs on the bundle stage of instance 0, iteration 11, when GMTK is writing params.0.params.12. You can see that this params file is missing some lines:\r\n\r\n```\r\n#!C\r\n\r\n[maxwl@noble103739 2017-06-12_traindir_13_B_cell]$ cat params/params.0.params.11 | grep mean_ | wc -l\r\n624\r\n[maxwl@noble103739 2017-06-12_traindir_13_B_cell]$ cat params/params.0.params.12 | grep mean_ | wc -l\r\n622\r\n\r\n```\r\n\r\nI copied the GMTK command itself into the file gmtk_cmd.sh in that directory. I set -verbosity 20 in that file; running with that verbosity gives the following output, showing that GMTK vanished a component.\r\n\r\n```\r\n#!C\r\n\r\n\r\n\"\r\nNOTE: DPMF 'dpmf_seg1_subseg0_H3K4me2' has 1/0 elements vanishing/splitting\r\n\"\r\n```\r\n\"", "markup": "markdown", "html": "<p>From @mlibbrecht :</p>\n<p>\"Michael L and I recently identified a bug in the current mixtures of Gaussians implementation.</p>\n<p>The bug is triggered when any one mixture component receives zero probability mass in EM. When this happens, GMTK \"vanishes\" that component; that is, it does not output a mean parameter for it. This causes the next round of training to fail, because the params file is now missing one of the parameters that it's supposed to have.</p>\n<p>There is a very simple fix that Jeff helped me find (thanks, Jeff!). The fix is to move some parameters that used to be in the input.master file into the params.X.params.Y files. That way, GMTK can change the Gaussian to have (for example) two components rather than three, and everything will work after that. Currently, the input.master file has the structure:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"cp\">#ifndef INPUT_PARAMS_FILENAME</span>\n<span class=\"n\">DENSE_CPT_IN_FILE</span> <span class=\"kr\">inline</span> \n<span class=\"o\">&lt;</span><span class=\"n\">initial</span> <span class=\"n\">parameter</span> <span class=\"n\">values</span><span class=\"o\">&gt;</span>\n<span class=\"n\">MEAN_IN_FILE</span> <span class=\"kr\">inline</span>\n<span class=\"o\">&lt;</span><span class=\"n\">initial</span> <span class=\"n\">parameter</span> <span class=\"n\">values</span><span class=\"o\">&gt;</span>\n<span class=\"n\">COVAR_IN_FILE</span> <span class=\"kr\">inline</span>\n<span class=\"o\">&lt;</span><span class=\"n\">initial</span> <span class=\"n\">parameter</span> <span class=\"n\">values</span><span class=\"o\">&gt;</span>\n<span class=\"cp\">#else</span>\n<span class=\"n\">DENSE_CPT_IN_FILE</span> <span class=\"n\">INPUT_PARAMS_FILENAME</span> <span class=\"n\">ascii</span>\n<span class=\"n\">MEAN_IN_FILE</span> <span class=\"n\">INPUT_PARAMS_FILENAME</span> <span class=\"n\">ascii</span>\n<span class=\"n\">COVAR_IN_FILE</span> <span class=\"n\">INPUT_PARAMS_FILENAME</span> <span class=\"n\">ascii</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n\n\n<p>This structure causes GMTK to read the initial values at the first iteration (when INPUT_PARAMS_FILENAME is not set on the command line), and values from params.X.params.Y files in subsequent iterations. The fix for the bug is just to move some parameters from outside the #ifndef to inside it. Specifically, I think we need to move the DPMF parameters starting with \"DPMF_IN_FILE inline\" inside the #ifndef structure.                                                                                                                                             </p>\n<p>You can get an example at this link </p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"p\">[</span><span class=\"n\">redacted</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>The offending gmtkEMtrain command occurs on the bundle stage of instance 0, iteration 11, when GMTK is writing params.0.params.12. You can see that this params file is missing some lines:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"p\">[</span><span class=\"n\">maxwl</span><span class=\"err\">@</span><span class=\"n\">noble103739</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"n\">_traindir_13_B_cell</span><span class=\"p\">]</span><span class=\"err\">$</span> <span class=\"n\">cat</span> <span class=\"n\">params</span><span class=\"o\">/</span><span class=\"n\">params</span><span class=\"mf\">.0</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"mf\">.11</span> <span class=\"o\">|</span> <span class=\"n\">grep</span> <span class=\"n\">mean_</span> <span class=\"o\">|</span> <span class=\"n\">wc</span> <span class=\"o\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">624</span>\n<span class=\"p\">[</span><span class=\"n\">maxwl</span><span class=\"err\">@</span><span class=\"n\">noble103739</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"n\">_traindir_13_B_cell</span><span class=\"p\">]</span><span class=\"err\">$</span> <span class=\"n\">cat</span> <span class=\"n\">params</span><span class=\"o\">/</span><span class=\"n\">params</span><span class=\"mf\">.0</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"mf\">.12</span> <span class=\"o\">|</span> <span class=\"n\">grep</span> <span class=\"n\">mean_</span> <span class=\"o\">|</span> <span class=\"n\">wc</span> <span class=\"o\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">622</span>\n</pre></div>\n\n\n<p>I copied the GMTK command itself into the file gmtk_cmd.sh in that directory. I set -verbosity 20 in that file; running with that verbosity gives the following output, showing that GMTK vanished a component.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"s\">&quot;</span>\n<span class=\"nl\">NOTE</span><span class=\"p\">:</span> <span class=\"n\">DPMF</span> <span class=\"err\">&#39;</span><span class=\"n\">dpmf_seg1_subseg0_H3K4me2</span><span class=\"err\">&#39;</span> <span class=\"n\">has</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">0</span> <span class=\"n\">elements</span> <span class=\"n\">vanishing</span><span class=\"o\">/</span><span class=\"n\">splitting</span>\n<span class=\"s\">&quot;</span>\n</pre></div>\n\n\n<p>\"</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-06-20T14:29:46.048016+00:00", "milestone": null, "updated_on": "2019-03-04T17:32:04.709017+00:00", "type": "issue", "id": 113}