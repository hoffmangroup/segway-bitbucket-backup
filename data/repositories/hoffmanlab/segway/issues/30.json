{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "links": {"attachments": {"href": "data/repositories/hoffmanlab/segway/issues/30/attachments_page=1.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/issues/30.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/issues/30/watch"}, "comments": {"href": "data/repositories/hoffmanlab/segway/issues/30/comments_page=1.json"}, "html": {"href": "#!/hoffmanlab/segway/issues/30/cannot-generate-command-line-help-files"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/issues/30/vote"}}, "reporter": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "title": "Cannot generate \"command line help\" files without installation of segway", "component": null, "votes": 0, "watches": 1, "content": {"raw": "This issue is targeted at build machines that do not allow for c modules to be built or other external non-python software to be installed. Currently the command line help files are generated using:\r\n\r\n```shell\r\npython gethelp.py segway | sed -e 's/ATTR VALUE/<ATTR VALUE>/g' > _build/cmdline-help/segway.help.txt\r\npython gethelp.py segway-layer | sed -e 's/ATTR VALUE/<ATTR VALUE>/g' > _build/cmdline-help/segway-layer.help.txt\r\npython gethelp.py segway-winner | sed -e 's/ATTR VALUE/<ATTR VALUE>/g' > _build/cmdline-help/segway-winner.help.txt\r\n```\r\n\r\nThe python script itself attempts to run segway (from its subdirectory) but if the software has not been installed properly (on a failed pip install for example) none of the imports will work. A failed \"pip install segway\" does not install *any* of segway's dependencies.\r\n\r\nFor generating documentation it should not be necessary to have a full install happen. However extracting the command-line help text is currently non-trivial without having a proper install first.\r\n\r\nThere are two possible solutions that I'm aware of:\r\n\r\n* Mocking out all failed external imports (making them empty imports and implementing the few necessary functions). See http://docs.readthedocs.org/en/latest/faq.html#i-get-import-errors-on-libraries-that-depend-on-c-modules . The only issue with this comes to mocking out the optplus module. This module adds functionality to optparse that is non-trivial though technically possible to mock out. It may or may not affect the generated help files depending on the mocked out implementation. Non-committed sample in doc/conf.py  (up to optplus not working is shown below): \r\n\r\n```python\r\n# Custom segway configuration\r\n# When not using 'make' to build, the 'help' text included in the documentation is\r\n# not generated. This guarentees generation of the command line help files.\r\nimport os\r\n\r\n# Read the docs custom build logic\r\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\r\n# If we're building on readthedocs.org\r\nif on_rtd:\r\n    # Do not rely on additional C-based python modules (e.g. genomedata)\r\n    # On a public build system we cannot necessarily control what software is\r\n    # installed.\r\n\r\n    # Add mock imports to simply get the necessary information for\r\n    # documenation to build\r\n    # From http://docs.readthedocs.org/en/latest/faq.html\r\n    from mock import MagicMock\r\n    import optparse\r\n    class CustomMock(MagicMock):\r\n        @classmethod\r\n        # This magic method is not implemented by default\r\n        def __getattr__(cls, name):\r\n            mock_obj = CustomMock()\r\n            # Numpy specific logic to override the assert in run.py\r\n            if name == \"finfo\":\r\n                # Return a callable mock object with a return value of an\r\n                # object with .machep set to less than -17\r\n                # By default, return_value is a mock object\r\n                mock_obj.return_value.machep = -20 # by default\r\n            # Optplus (Michael Hoffman specific optparse add-on) overrides\r\n            if name == \"parse_args\":\r\n                mock_obj.return_value = (None, [\"--help\"])\r\n\r\n            return mock_obj\r\n\r\n    MOCK_MODULES = [\r\n        \"numpy\", \"numpy.random\", \"optbuild\", \"path\", \"tabdelim\",\r\n        \"colorbrewer\", \"tables\", \"genomedata\", \"genomedata._util\",\r\n        \"optplus\"\r\n    ]\r\n    sys.modules.update(\r\n        (module_name, CustomMock()) for module_name in MOCK_MODULES\r\n    )\r\n\r\n```\r\n\r\n* Creating a custom sphinx extension. See http://sphinx-doc.org/extdev/index.html#dev-extensions . A potentially simpler solution would to create an extension/directive where if the include fails, default text is placed in its stead. There's currently no equivalent functionality with current directives in restructured text so an extension would need to be developed. The idea would be if the command line help file is fails to be \"include\"d, then at least some default provided text is inserted which would be better than nothing.", "markup": "markdown", "html": "<p>This issue is targeted at build machines that do not allow for c modules to be built or other external non-python software to be installed. Currently the command line help files are generated using:</p>\n<div class=\"codehilite language-shell\"><pre><span></span>python gethelp.py segway <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s/ATTR VALUE/&lt;ATTR VALUE&gt;/g&#39;</span> &gt; _build/cmdline-help/segway.help.txt\npython gethelp.py segway-layer <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s/ATTR VALUE/&lt;ATTR VALUE&gt;/g&#39;</span> &gt; _build/cmdline-help/segway-layer.help.txt\npython gethelp.py segway-winner <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s/ATTR VALUE/&lt;ATTR VALUE&gt;/g&#39;</span> &gt; _build/cmdline-help/segway-winner.help.txt\n</pre></div>\n\n\n<p>The python script itself attempts to run segway (from its subdirectory) but if the software has not been installed properly (on a failed pip install for example) none of the imports will work. A failed \"pip install segway\" does not install <em>any</em> of segway's dependencies.</p>\n<p>For generating documentation it should not be necessary to have a full install happen. However extracting the command-line help text is currently non-trivial without having a proper install first.</p>\n<p>There are two possible solutions that I'm aware of:</p>\n<ul>\n<li>Mocking out all failed external imports (making them empty imports and implementing the few necessary functions). See <a href=\"http://docs.readthedocs.org/en/latest/faq.html#i-get-import-errors-on-libraries-that-depend-on-c-modules\" rel=\"nofollow\" class=\"ap-connect-link\">http://docs.readthedocs.org/en/latest/faq.html#i-get-import-errors-on-libraries-that-depend-on-c-modules</a> . The only issue with this comes to mocking out the optplus module. This module adds functionality to optparse that is non-trivial though technically possible to mock out. It may or may not affect the generated help files depending on the mocked out implementation. Non-committed sample in doc/conf.py  (up to optplus not working is shown below): </li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Custom segway configuration</span>\n<span class=\"c1\"># When not using &#39;make&#39; to build, the &#39;help&#39; text included in the documentation is</span>\n<span class=\"c1\"># not generated. This guarentees generation of the command line help files.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"c1\"># Read the docs custom build logic</span>\n<span class=\"n\">on_rtd</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;READTHEDOCS&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;True&#39;</span>\n<span class=\"c1\"># If we&#39;re building on readthedocs.org</span>\n<span class=\"k\">if</span> <span class=\"n\">on_rtd</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Do not rely on additional C-based python modules (e.g. genomedata)</span>\n    <span class=\"c1\"># On a public build system we cannot necessarily control what software is</span>\n    <span class=\"c1\"># installed.</span>\n\n    <span class=\"c1\"># Add mock imports to simply get the necessary information for</span>\n    <span class=\"c1\"># documenation to build</span>\n    <span class=\"c1\"># From http://docs.readthedocs.org/en/latest/faq.html</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">mock</span> <span class=\"kn\">import</span> <span class=\"n\">MagicMock</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">optparse</span>\n    <span class=\"k\">class</span> <span class=\"nc\">CustomMock</span><span class=\"p\">(</span><span class=\"n\">MagicMock</span><span class=\"p\">):</span>\n        <span class=\"nd\">@classmethod</span>\n        <span class=\"c1\"># This magic method is not implemented by default</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"n\">mock_obj</span> <span class=\"o\">=</span> <span class=\"n\">CustomMock</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Numpy specific logic to override the assert in run.py</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;finfo&quot;</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Return a callable mock object with a return value of an</span>\n                <span class=\"c1\"># object with .machep set to less than -17</span>\n                <span class=\"c1\"># By default, return_value is a mock object</span>\n                <span class=\"n\">mock_obj</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"n\">machep</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">20</span> <span class=\"c1\"># by default</span>\n            <span class=\"c1\"># Optplus (Michael Hoffman specific optparse add-on) overrides</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;parse_args&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">mock_obj</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;--help&quot;</span><span class=\"p\">])</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">mock_obj</span>\n\n    <span class=\"n\">MOCK_MODULES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;numpy.random&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;optbuild&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tabdelim&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;colorbrewer&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tables&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;genomedata&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;genomedata._util&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;optplus&quot;</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">CustomMock</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">module_name</span> <span class=\"ow\">in</span> <span class=\"n\">MOCK_MODULES</span>\n    <span class=\"p\">)</span>\n</pre></div>\n\n\n<ul>\n<li>Creating a custom sphinx extension. See <a href=\"http://sphinx-doc.org/extdev/index.html#dev-extensions\" rel=\"nofollow\" class=\"ap-connect-link\">http://sphinx-doc.org/extdev/index.html#dev-extensions</a> . A potentially simpler solution would to create an extension/directive where if the include fails, default text is placed in its stead. There's currently no equivalent functionality with current directives in restructured text so an extension would need to be developed. The idea would be if the command line help file is fails to be \"include\"d, then at least some default provided text is inserted which would be better than nothing.</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2015-03-24T15:59:19.346814+00:00", "milestone": null, "updated_on": "2015-03-24T16:23:38.876887+00:00", "type": "issue", "id": 30}