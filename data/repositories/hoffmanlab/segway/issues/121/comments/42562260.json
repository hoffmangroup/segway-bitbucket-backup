{"links": {"self": {"href": "data/repositories/hoffmanlab/segway/issues/121/comments/42562260.json"}, "html": {"href": "#!/hoffmanlab/segway/issues/121#comment-42562260"}}, "issue": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/issues/121.json"}}, "type": "issue", "id": 121, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "title": "--include-coord does not verify if the coordinates are valid before running Segway"}, "content": {"raw": "It is indeed similar but I think it is a different issue. \n\n- The output messages and the behaviors are differents, here it raises an error and the whole run crashes (in my case after 3 days), for issue #31 it raises a warning and fill the regions with Nan.\n- The cause is different, here the region defined in in --include-coord do not exist (what I called invalid), in issue #31 the wrong regions are just empty and valid regions.\n\nI think this issue can be fixed by comparing the chromosome names and coordinates of the genomedata archives against the include coords before running the training or annotation task in order to prevent useless computation. \n\nI see two solutions for this problem:\n\n- Segway stops and report the invalid regions (preferred)\n- Segway continues and consider the invalid chromosomes as Nan (then the issue becomes the same as issue #31). This behaviour seems dangerous as you might end up training and annotating on very large empty regions.", "markup": "markdown", "html": "<p>It is indeed similar but I think it is a different issue. </p>\n<ul>\n<li>The output messages and the behaviors are differents, here it raises an error and the whole run crashes (in my case after 3 days), for issue <a href=\"#!/hoffmanlab/segway/issues/31/better-warning-message-when-include-coords\" rel=\"nofollow\" title=\"Better warning message when --include-coords includes a region not in the genomedata assembly\" class=\"ap-connect-link\">#31</a> it raises a warning and fill the regions with Nan.</li>\n<li>The cause is different, here the region defined in in --include-coord do not exist (what I called invalid), in issue <a href=\"#!/hoffmanlab/segway/issues/31/better-warning-message-when-include-coords\" rel=\"nofollow\" title=\"Better warning message when --include-coords includes a region not in the genomedata assembly\" class=\"ap-connect-link\">#31</a> the wrong regions are just empty and valid regions.</li>\n</ul>\n<p>I think this issue can be fixed by comparing the chromosome names and coordinates of the genomedata archives against the include coords before running the training or annotation task in order to prevent useless computation. </p>\n<p>I see two solutions for this problem:</p>\n<ul>\n<li>Segway stops and report the invalid regions (preferred)</li>\n<li>Segway continues and consider the invalid chromosomes as Nan (then the issue becomes the same as issue <a href=\"#!/hoffmanlab/segway/issues/31/better-warning-message-when-include-coords\" rel=\"nofollow\" title=\"Better warning message when --include-coords includes a region not in the genomedata assembly\" class=\"ap-connect-link\">#31</a>). This behaviour seems dangerous as you might end up training and annotating on very large empty regions.</li>\n</ul>", "type": "rendered"}, "created_on": "2018-01-11T15:55:09.893387+00:00", "user": {"display_name": "Micka\u00ebl Mendez", "uuid": "{3e035b9e-0328-44e8-8622-5c7e9ed060b2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3e035b9e-0328-44e8-8622-5c7e9ed060b2%7D"}, "html": {"href": "https://bitbucket.org/%7B3e035b9e-0328-44e8-8622-5c7e9ed060b2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1cb7d89dcab61313d21c5ef402c28e11d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-0.png"}}, "nickname": "Mickael Mendez", "type": "user", "account_id": "557058:aae10d90-ba66-49cd-a04d-5392b943760d"}, "updated_on": "2018-01-11T15:55:48.362969+00:00", "type": "issue_comment", "id": 42562260}