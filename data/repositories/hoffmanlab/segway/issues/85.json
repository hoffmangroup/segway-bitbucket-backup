{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "links": {"attachments": {"href": "data/repositories/hoffmanlab/segway/issues/85/attachments_page=1.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/issues/85.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/issues/85/watch"}, "comments": {"href": "data/repositories/hoffmanlab/segway/issues/85/comments_page=1.json"}, "html": {"href": "#!/hoffmanlab/segway/issues/85/better-random-number-generation-per"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/issues/85/vote"}}, "reporter": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "title": "Better random number generation per instance", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently Segway has a distinct disadvantage that for that a seed N and N+1, the seeds will share same the same seeded initial parameters from N+1 onwards where instances are > 1. Other current methods seem to be error-prone or not entirely correct.\r\n\r\nSee http://stats.stackexchange.com/questions/233061/best-way-to-seed-n-independent-random-number-generators-from-1-value\r\n\r\nFuture implementations may want to use the randomstate pypi module: http://bashtage.github.io/ng-numpy-randomstate/doc/build/html/parallel.html#independent-streams Specifically it has an in-development feature of a different PRNG then current one numpy uses where you can seed and set an ID independent RNG streams.", "markup": "markdown", "html": "<p>Currently Segway has a distinct disadvantage that for that a seed N and N+1, the seeds will share same the same seeded initial parameters from N+1 onwards where instances are &gt; 1. Other current methods seem to be error-prone or not entirely correct.</p>\n<p>See <a href=\"http://stats.stackexchange.com/questions/233061/best-way-to-seed-n-independent-random-number-generators-from-1-value\" rel=\"nofollow\" class=\"ap-connect-link\">http://stats.stackexchange.com/questions/233061/best-way-to-seed-n-independent-random-number-generators-from-1-value</a></p>\n<p>Future implementations may want to use the randomstate pypi module: <a href=\"http://bashtage.github.io/ng-numpy-randomstate/doc/build/html/parallel.html#independent-streams\" rel=\"nofollow\" class=\"ap-connect-link\">http://bashtage.github.io/ng-numpy-randomstate/doc/build/html/parallel.html#independent-streams</a> Specifically it has an in-development feature of a different PRNG then current one numpy uses where you can seed and set an ID independent RNG streams.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-09-14T19:31:59.226543+00:00", "milestone": null, "updated_on": "2016-09-14T19:31:59.226543+00:00", "type": "issue", "id": 85}