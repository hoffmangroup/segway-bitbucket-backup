{"links": {"self": {"href": "data/repositories/hoffmanlab/segway/issues/29/comments/22317674.json"}, "html": {"href": "#!/hoffmanlab/segway/issues/29#comment-22317674"}}, "issue": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/issues/29.json"}}, "type": "issue", "id": 29, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "title": "Better error reporting on running out of memory with GMTK vs other problems"}, "content": {"raw": "Yes, submit an enhancement request for this.\n\nThe GMTK programs exit with status 0 if successful. The convention is that any detected user input errors exit with status 1. Any internally caught programming errors (failed assertions) cause a platform-dependent exit status, typically 134 for Linux/GCC. Uncaught programming errors that cause signals like segmentation faults or arithmetic traps will typically have exit status 128 + n where  n is the signal number. 139 for a seg fault.\n\nMemory exhaustion in a malloc will probably seg fault. But I don't think it's very likely - most of the \"interesting\" memory is allocated with new. A seg fault is much more likely to indicate a GMTK bug.\n\nIt looks like uncaught exceptions also use exist status 134, so just looking at that won't be able to distinguish between a failed assertion and memory exhaustion. You may see different error messages in the two cases though.\n\nI would suggest adding a new exit status of 2 to indicate memory exhaustion.", "markup": "markdown", "html": "<p>Yes, submit an enhancement request for this.</p>\n<p>The GMTK programs exit with status 0 if successful. The convention is that any detected user input errors exit with status 1. Any internally caught programming errors (failed assertions) cause a platform-dependent exit status, typically 134 for Linux/GCC. Uncaught programming errors that cause signals like segmentation faults or arithmetic traps will typically have exit status 128 + n where  n is the signal number. 139 for a seg fault.</p>\n<p>Memory exhaustion in a malloc will probably seg fault. But I don't think it's very likely - most of the \"interesting\" memory is allocated with new. A seg fault is much more likely to indicate a GMTK bug.</p>\n<p>It looks like uncaught exceptions also use exist status 134, so just looking at that won't be able to distinguish between a failed assertion and memory exhaustion. You may see different error messages in the two cases though.</p>\n<p>I would suggest adding a new exit status of 2 to indicate memory exhaustion.</p>", "type": "rendered"}, "created_on": "2015-10-07T22:59:37.343081+00:00", "user": {"display_name": "Richard Rogers", "uuid": "{f49a2a7a-176f-4bb4-9da1-4e93c38335ee}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf49a2a7a-176f-4bb4-9da1-4e93c38335ee%7D"}, "html": {"href": "https://bitbucket.org/%7Bf49a2a7a-176f-4bb4-9da1-4e93c38335ee%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/0a499296f5ff06546c64c8c0337d6e86d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRR-5.png"}}, "nickname": "rprogers", "type": "user", "account_id": "557058:830a6f0e-2003-4cc8-ab0d-19b00ab2b580"}, "updated_on": null, "type": "issue_comment", "id": 22317674}