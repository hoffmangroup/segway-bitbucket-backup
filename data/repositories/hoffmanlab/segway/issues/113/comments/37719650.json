{"links": {"self": {"href": "data/repositories/hoffmanlab/segway/issues/113/comments/37719650.json"}, "html": {"href": "#!/hoffmanlab/segway/issues/113#comment-37719650"}}, "issue": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/issues/113.json"}}, "type": "issue", "id": 113, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "title": "Accounting for Gaussian components vanishing upon reaching 0 probability mass"}, "content": {"raw": "GMTK-side clarification from Prof Bilmes:\n\n\"Just to clarify, the behavior that GMTK is doing (removing the component) is the only sensible thing to do. In some cases, when you set up a fixed number of components in a Gaussian mixture HMM-based system, the data will not support there being as many components as you initially set up. The EM algorithm works by computing p(q_t=i|x_t) where t is a time variable and i is the index of a component. If the data is such that p(q_t=i|x_t) = 0 for all t and for some i, then there is nothing that the component can learn from, which indicates the component should be removed. When this happens, GMTK removes that component, but the parameter files have to be set up so that it can take advantage of this ability. Right now, as Max mentioned below, Segway was not using the parameter in a way that it would know that the the component was removed. Also the GMTK verbosity was turned to zero (default is about 10, and that figure is set so that only the warning messages you should be aware of are shown), so the warning messages that normally get generated were not being seen. \n\nI should also mention that GMTK also has the inverse capability, i.e., when the data supports there being more components in a mixture than there currently are, then it will split some of the components. In the past, the best number of components per state has been decided via a series of splits and removals done during the EM training process (all of which GMTK supports). If at some point you'd like to adjust segway to use this, let me know, as it is likely it would work better (not to mention avoid numerical problems). \"", "markup": "markdown", "html": "<p>GMTK-side clarification from Prof Bilmes:</p>\n<p>\"Just to clarify, the behavior that GMTK is doing (removing the component) is the only sensible thing to do. In some cases, when you set up a fixed number of components in a Gaussian mixture HMM-based system, the data will not support there being as many components as you initially set up. The EM algorithm works by computing p(q_t=i|x_t) where t is a time variable and i is the index of a component. If the data is such that p(q_t=i|x_t) = 0 for all t and for some i, then there is nothing that the component can learn from, which indicates the component should be removed. When this happens, GMTK removes that component, but the parameter files have to be set up so that it can take advantage of this ability. Right now, as Max mentioned below, Segway was not using the parameter in a way that it would know that the the component was removed. Also the GMTK verbosity was turned to zero (default is about 10, and that figure is set so that only the warning messages you should be aware of are shown), so the warning messages that normally get generated were not being seen. </p>\n<p>I should also mention that GMTK also has the inverse capability, i.e., when the data supports there being more components in a mixture than there currently are, then it will split some of the components. In the past, the best number of components per state has been decided via a series of splits and removals done during the EM training process (all of which GMTK supports). If at some point you'd like to adjust segway to use this, let me know, as it is likely it would work better (not to mention avoid numerical problems). \"</p>", "type": "rendered"}, "created_on": "2017-06-20T14:30:18.578430+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "updated_on": null, "type": "issue_comment", "id": 37719650}