{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/120301381.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-120301381"}}, "parent": {"id": 120115684, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/120115684.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-120115684"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Yes, I\u2019m hoping to get through this and the VE comments on Sunday", "markup": "markdown", "html": "<p>Yes, I\u2019m hoping to get through this and the VE comments on Sunday</p>", "type": "rendered"}, "created_on": "2019-10-10T16:27:17.305168+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "updated_on": "2019-10-10T16:27:17.320467+00:00", "type": "pullrequest_comment", "id": 120301381}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/120115684.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-120115684"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "@{5ac790531b5dd37ea53a123d} do you have time/interest in working on this at the moment? There\u2019s no rush for this PR but I figure I should ask.", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"5ac790531b5dd37ea53a123d\">@Matthew McNeil</span> do you have time/interest in working on this at the moment? There\u2019s no rush for this PR but I figure I should ask.</p>", "type": "rendered"}, "created_on": "2019-10-09T16:23:34.517787+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-10-09T16:23:34.537122+00:00", "type": "pullrequest_comment", "id": 120115684}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/119562885.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-119562885"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "In general, why is `InlineSection` specified every time? If the alternative is in file, presumably the objects would also not be defined for that section? It would be much more streamlined if it could be avoided and internally the API could organize accordingly.", "markup": "markdown", "html": "<p>In general, why is <code>InlineSection</code> specified every time? If the alternative is in file, presumably the objects would also not be defined for that section? It would be much more streamlined if it could be avoided and internally the API could organize accordingly.</p>", "type": "rendered"}, "created_on": "2019-10-04T16:02:19.214789+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-10-04T16:02:19.228306+00:00", "type": "pullrequest_comment", "id": 119562885}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/119559603.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-119559603"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Ideally this would just be indexed with `DENSE_CPT`", "markup": "markdown", "html": "<p>Ideally this would just be indexed with <code>DENSE_CPT</code></p>", "type": "rendered"}, "created_on": "2019-10-04T15:40:28.179127+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-10-04T15:40:28.189804+00:00", "type": "pullrequest_comment", "id": 119559603}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/119553354.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-119553354"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Remove dead code", "markup": "markdown", "html": "<p>Remove dead code</p>", "type": "rendered"}, "created_on": "2019-10-04T15:04:26.432062+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-10-04T15:04:26.443766+00:00", "type": "pullrequest_comment", "id": 119553354}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/119553323.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-119553323"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Remove dead code", "markup": "markdown", "html": "<p>Remove dead code</p>", "type": "rendered"}, "created_on": "2019-10-04T15:04:18.631261+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-10-04T15:04:18.644361+00:00", "type": "pullrequest_comment", "id": 119553323}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/119553086.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-119553086"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "`INLINE_TMPL` should be defined as a class variable", "markup": "markdown", "html": "<p><code>INLINE_TMPL</code> should be defined as a class variable</p>", "type": "rendered"}, "created_on": "2019-10-04T15:02:57.987168+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-10-04T15:02:57.998484+00:00", "type": "pullrequest_comment", "id": 119553086}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "8cbdd3f79d65", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/8cbdd3f79d65.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/8cbdd3f79d65"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "776377c0eba5", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/776377c0eba5"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/776377c0eba5"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-08-30T20:53:58.647061+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115021755.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115021755"}}, "parent": {"id": 115021236, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115021236.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115021236"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Yes but if an object is being put into `input_master[\"DENSE_CPT\"]` it would be safe to assume that a DenseCPT object is expected. The `__setitem__` method would create the correct object type for you. The object type can be inferred and then error out of the input data is malformed.\n\nI do think the syntax I suggested is preferred but perhaps @{557058:a9657985-692c-405c-995b-4e41cda7ba2b} has a different opinion", "markup": "markdown", "html": "<p>Yes but if an object is being put into <code>input_master[\"DENSE_CPT\"]</code> it would be safe to assume that a DenseCPT object is expected. The <code>__setitem__</code> method would create the correct object type for you. The object type can be inferred and then error out of the input data is malformed.</p>\n<p>I do think the syntax I suggested is preferred but perhaps <span class=\"ap-mention\" data-atlassian-id=\"557058:a9657985-692c-405c-995b-4e41cda7ba2b\">@Michael Hoffman</span> has a different opinion</p>", "type": "rendered"}, "created_on": "2019-08-29T20:03:54.762358+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T20:03:54.781170+00:00", "type": "pullrequest_comment", "id": 115021755}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115021236.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115021236"}}, "parent": {"id": 115018647, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115018647.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115018647"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "I\u2019m not sure this is possible. Objects need to be the correct type, ie DenseCPT. This wouldn\u2019t work unless you created a function to choose the correct class, then initialized it. Is this something we\u2019d want over just having to do\n\n`input_master[\u201dDENSE_CPT\u201d][\u201dtwo_dimensional_cpt\u201d] = DenseCPT(\"two_dinemsional_cpt\", [[0.25, 0.25], [0.25, 0.25]])`", "markup": "markdown", "html": "<p>I\u2019m not sure this is possible. Objects need to be the correct type, ie DenseCPT. This wouldn\u2019t work unless you created a function to choose the correct class, then initialized it. Is this something we\u2019d want over just having to do</p>\n<p><code>input_master[\u201dDENSE_CPT\u201d][\u201dtwo_dimensional_cpt\u201d] = DenseCPT(\"two_dinemsional_cpt\", [[0.25, 0.25], [0.25, 0.25]])</code></p>", "type": "rendered"}, "created_on": "2019-08-29T19:59:39.442876+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-29T19:59:39.458916+00:00", "type": "pullrequest_comment", "id": 115021236}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019950.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019950"}}, "parent": {"id": 115019802, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019802.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019802"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "I understand now. Can you replace the string with `DENSE_CPT_KIND` then?", "markup": "markdown", "html": "<p>I understand now. Can you replace the string with <code>DENSE_CPT_KIND</code> then?</p>", "type": "rendered"}, "created_on": "2019-08-29T19:48:41.817953+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T19:48:41.830570+00:00", "type": "pullrequest_comment", "id": 115019950}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019853.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019853"}}, "parent": {"id": 115019141, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019141.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019141"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "OK I understand now that the kind, and name are effective metadata for effectively a string object. Can you mark the parameter as unused by prepending a `_` ?", "markup": "markdown", "html": "<p>OK I understand now that the kind, and name are effective metadata for effectively a string object. Can you mark the parameter as unused by prepending a <code>_</code> ?</p>", "type": "rendered"}, "created_on": "2019-08-29T19:47:50.809507+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T19:47:50.823460+00:00", "type": "pullrequest_comment", "id": 115019853}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019802.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019802"}}, "parent": {"id": 115019169, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019169.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019169"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Yes it\u2019s defined as a global variable at the top of input\\_master as per your original suggestion", "markup": "markdown", "html": "<p>Yes it\u2019s defined as a global variable at the top of input_master as per your original suggestion</p>", "type": "rendered"}, "created_on": "2019-08-29T19:47:23.911100+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-29T19:47:23.926112+00:00", "type": "pullrequest_comment", "id": 115019802}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019169.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019169"}}, "parent": {"id": 115019028, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019028.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019028"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "The string \u201cDENSE\\_CPT\u201d is being used as a key in this instance. However it\u2019s an all caps name for the DenseCPT object. Is it always the string used internally in the GMTK input master? ", "markup": "markdown", "html": "<p>The string \u201cDENSE_CPT\u201d is being used as a key in this instance. However it\u2019s an all caps name for the DenseCPT object. Is it always the string used internally in the GMTK input master? </p>", "type": "rendered"}, "created_on": "2019-08-29T19:41:50.550614+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T19:41:50.564697+00:00", "type": "pullrequest_comment", "id": 115019169}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019141.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019141"}}, "parent": {"id": 115018943, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115018943.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115018943"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This is run immediately after \\_\\_new_\\_\\__ \n\n\u200c", "markup": "markdown", "html": "<p>This is run immediately after __new____ </p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-08-29T19:41:33.726963+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-29T19:41:33.737054+00:00", "type": "pullrequest_comment", "id": 115019141}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115019028.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115019028"}}, "parent": {"id": 115018721, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115018721.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115018721"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "I\u2019m not sure what you mean by keys. These are all classes defined in the input\\_master.py file.", "markup": "markdown", "html": "<p>I\u2019m not sure what you mean by keys. These are all classes defined in the input_master.py file.</p>", "type": "rendered"}, "created_on": "2019-08-29T19:40:21.086916+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-29T19:40:21.097308+00:00", "type": "pullrequest_comment", "id": 115019028}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115018943.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115018943"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "content is unused.", "markup": "markdown", "html": "<p>content is unused.</p>", "type": "rendered"}, "created_on": "2019-08-29T19:39:31.394243+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T19:39:31.404117+00:00", "type": "pullrequest_comment", "id": 115018943}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115018721.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115018721"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Is there a place where stuff like \u201cDENSE\\_CPT\u201d is defined? What keys would be used for stuff like Covar, NameCollection, DeterministicCPT and the like come from? This should probably be defined somewhere in the GMTK python module itself.", "markup": "markdown", "html": "<p>Is there a place where stuff like \u201cDENSE_CPT\u201d is defined? What keys would be used for stuff like Covar, NameCollection, DeterministicCPT and the like come from? This should probably be defined somewhere in the GMTK python module itself.</p>", "type": "rendered"}, "created_on": "2019-08-29T19:37:39.853413+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T19:37:39.862901+00:00", "type": "pullrequest_comment", "id": 115018721}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115018647.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115018647"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Ideally this piece of code should read like\n\n`input_master[\u201dDENSE_CPT\u201d][\u201dtwo_dimensional_cpt\u201d] = [[0.25, 0.25], [0.25, 0.25]]` which would do the update and extract the key to be put into a DenseCPT object. You can do this likely through overriding the `__setitem__` method.", "markup": "markdown", "html": "<p>Ideally this piece of code should read like</p>\n<p><code>input_master[\u201dDENSE_CPT\u201d][\u201dtwo_dimensional_cpt\u201d] = [[0.25, 0.25], [0.25, 0.25]]</code> which would do the update and extract the key to be put into a DenseCPT object. You can do this likely through overriding the <code>__setitem__</code> method.</p>", "type": "rendered"}, "created_on": "2019-08-29T19:36:45.971298+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T19:36:45.979433+00:00", "type": "pullrequest_comment", "id": 115018647}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115017582.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115017582"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This is a duplicate of `__init__`. Likely should just have `__init__` call `update`.", "markup": "markdown", "html": "<p>This is a duplicate of <code>__init__</code>. Likely should just have <code>__init__</code> call <code>update</code>.</p>", "type": "rendered"}, "created_on": "2019-08-29T19:27:31.966957+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-29T19:27:31.980665+00:00", "type": "pullrequest_comment", "id": 115017582}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/115012471.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-115012471"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "@{557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee} The changes to the OrderedDicts have been made. This is ready for our review", "markup": "markdown", "html": "<p><span class=\"ap-mention ap-mention-me\" data-atlassian-id=\"557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee\">@Eric Roberts</span> The changes to the OrderedDicts have been made. This is ready for our review</p>", "type": "rendered"}, "created_on": "2019-08-29T18:42:27.303969+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "updated_on": "2019-08-29T18:42:27.323578+00:00", "type": "pullrequest_comment", "id": 115012471}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "8cbdd3f79d65", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/8cbdd3f79d65.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/8cbdd3f79d65"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5da1da03edb8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/5da1da03edb8"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/5da1da03edb8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-08-29T18:41:24.895068+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "9d6cdcaa85b3", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/9d6cdcaa85b3.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/9d6cdcaa85b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7a11ca08bf96", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/7a11ca08bf96"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/7a11ca08bf96"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-08-23T19:04:21.652690+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "9d6cdcaa85b3", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/9d6cdcaa85b3.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/9d6cdcaa85b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "24cb714eb75b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/24cb714eb75b"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/24cb714eb75b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-08-20T19:53:45.229652+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113795778.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113795778"}}, "parent": {"id": 113794460, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113794460.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113794460"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "No, InputMaster will print sections in the order that they are given to it. Order does matter for the final file, though at the moment it is up to the user to ensure they add to the master correctly. There is no defined order in input.master files though, rather you just may end up with variables being referenced before being defined.", "markup": "markdown", "html": "<p>No, InputMaster will print sections in the order that they are given to it. Order does matter for the final file, though at the moment it is up to the user to ensure they add to the master correctly. There is no defined order in input.master files though, rather you just may end up with variables being referenced before being defined.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:34:20.639278+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-20T19:34:20.650151+00:00", "type": "pullrequest_comment", "id": 113795778}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113795513.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113795513"}}, "parent": {"id": 113794864, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113794864.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113794864"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "No, you can have the same section appear twice within a single input.master. So for example, you could have two sections with Deterministic CPT\u2019s at the beginning and the end of the file. This was the original justification for having a list instead of an OrderedDict. I think we expected people to start a new section rather than add to an existing one, originally.", "markup": "markdown", "html": "<p>No, you can have the same section appear twice within a single input.master. So for example, you could have two sections with Deterministic CPT\u2019s at the beginning and the end of the file. This was the original justification for having a list instead of an OrderedDict. I think we expected people to start a new section rather than add to an existing one, originally.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:31:53.830916+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-20T19:31:53.842845+00:00", "type": "pullrequest_comment", "id": 113795513}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113794864.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113794864"}}, "parent": {"id": 113792403, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113792403.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113792403"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This is necessary if you want to add objects of the same type into the same section correct? Maybe the OrderedDict for `input_master` might be better in this case? Having to type the exact index to add to a particular section seems potentially error prone.", "markup": "markdown", "html": "<p>This is necessary if you want to add objects of the same type into the same section correct? Maybe the OrderedDict for <code>input_master</code> might be better in this case? Having to type the exact index to add to a particular section seems potentially error prone.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:26:34.669701+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-20T19:26:34.681716+00:00", "type": "pullrequest_comment", "id": 113794864}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113794460.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113794460"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "What happens when input\\_master is appended to out-of-order? Does order matter at all? Does it automatically group CPTs for example if I create a `DenseCPT` at the beginning and at the end of the test?\n\n\u200c", "markup": "markdown", "html": "<p>What happens when input_master is appended to out-of-order? Does order matter at all? Does it automatically group CPTs for example if I create a <code>DenseCPT</code> at the beginning and at the end of the test?</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-08-20T19:22:49.596135+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-20T19:22:49.605017+00:00", "type": "pullrequest_comment", "id": 113794460}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113794284.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113794284"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "`Section` objects should be able to initialize on a single item like `InputMaster` can.", "markup": "markdown", "html": "<p><code>Section</code> objects should be able to initialize on a single item like <code>InputMaster</code> can.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:20:53.956268+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-20T19:20:53.966999+00:00", "type": "pullrequest_comment", "id": 113794284}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113794103.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113794103"}}, "parent": {"id": 113793376, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113793376.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113793376"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "The idea would be that, for example, `__getattr__` would traverse the list, tree, etc to find the object. In this case it would iterate over each `Section` object and attempt the lookup.\n\nAlternatively you could have `InputMaster` inherit from an `OrderedDict` and use the `DENSE_CPT_KIND` types \\(maybe a different name?\\) used a keys to lookup the relevant sections. This might make something like `input_master[DENSE_CPT][\u201cexample_cpt\u201d]` possible.", "markup": "markdown", "html": "<p>The idea would be that, for example, <code>__getattr__</code> would traverse the list, tree, etc to find the object. In this case it would iterate over each <code>Section</code> object and attempt the lookup.</p>\n<p>Alternatively you could have <code>InputMaster</code> inherit from an <code>OrderedDict</code> and use the <code>DENSE_CPT_KIND</code> types (maybe a different name?) used a keys to lookup the relevant sections. This might make something like <code>input_master[DENSE_CPT][\u201cexample_cpt\u201d]</code> possible.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:19:14.661369+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-20T19:19:14.671825+00:00", "type": "pullrequest_comment", "id": 113794103}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113793422.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113793422"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Maybe this is worth discussing with @{557058:a9657985-692c-405c-995b-4e41cda7ba2b} , but I think it might be helpful to put a per-line comment/annotation \\(when possible\\) since these files are generated anyway when written. Something like `# number of CPT objects`, `# cardinality`, `# object index`, etc.", "markup": "markdown", "html": "<p>Maybe this is worth discussing with <span class=\"ap-mention\" data-atlassian-id=\"557058:a9657985-692c-405c-995b-4e41cda7ba2b\">@Michael Hoffman</span> , but I think it might be helpful to put a per-line comment/annotation (when possible) since these files are generated anyway when written. Something like <code># number of CPT objects</code>, <code># cardinality</code>, <code># object index</code>, etc.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:13:19.731343+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-20T19:13:19.747196+00:00", "type": "pullrequest_comment", "id": 113793422}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113793376.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113793376"}}, "parent": {"id": 113792389, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113792389.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113792389"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This issue is that InputMasters are composed of several InlineSections, which are the actual ordered dicts. So you would only be able to do input\\_master\\[0\\]\\[\u201cexample\\_cpt\u201d\\] in this case. InputMaster is a subclass of list.", "markup": "markdown", "html": "<p>This issue is that InputMasters are composed of several InlineSections, which are the actual ordered dicts. So you would only be able to do input_master[0][\u201cexample_cpt\u201d] in this case. InputMaster is a subclass of list.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:12:54.336274+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "updated_on": "2019-08-20T19:13:09.646738+00:00", "type": "pullrequest_comment", "id": 113793376}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113793026.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113793026"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "It would be ideal to get some whitespace between sections", "markup": "markdown", "html": "<p>It would be ideal to get some whitespace between sections</p>", "type": "rendered"}, "created_on": "2019-08-20T19:09:52.605804+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-20T19:09:52.617612+00:00", "type": "pullrequest_comment", "id": 113793026}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113792389.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113792389"}}, "parent": {"id": 113623489, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113623489.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113623489"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "The idea being that sections, being an OrderedDict, should be able to be referenced from the master InputMaster as well. For example from the test case below, `input_master[\"example_cpt\"]` would refer to the `InlineSection([(\"example_cpt\", DenseCPT([[0.5, 0.5]]))])` object and may be updated, read, etc.", "markup": "markdown", "html": "<p>The idea being that sections, being an OrderedDict, should be able to be referenced from the master InputMaster as well. For example from the test case below, <code>input_master[\"example_cpt\"]</code> would refer to the <code>InlineSection([(\"example_cpt\", DenseCPT([[0.5, 0.5]]))])</code> object and may be updated, read, etc.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:04:17.408932+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-20T19:04:25.610846+00:00", "type": "pullrequest_comment", "id": 113792389}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113792403.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113792403"}}, "parent": {"id": 113792105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113792105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113792105"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Update is the dictionary equivalent of append, since InlineSection is a subclass of OrderedDict. If it\u2019s perferred, an alias could be added for append as update in this case.", "markup": "markdown", "html": "<p>Update is the dictionary equivalent of append, since InlineSection is a subclass of OrderedDict. If it\u2019s perferred, an alias could be added for append as update in this case.</p>", "type": "rendered"}, "created_on": "2019-08-20T19:04:25.525158+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-20T19:04:25.538617+00:00", "type": "pullrequest_comment", "id": 113792403}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113792105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113792105"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This reads like it should be replacing the first element in the input\\_master list, namely the \u201cexample\\_cpt\u201d inline section. But looking at the reference it doesn\u2019t seem like that\u2019s the case. What is supposed be happening here and why would you use it over an append?", "markup": "markdown", "html": "<p>This reads like it should be replacing the first element in the input_master list, namely the \u201cexample_cpt\u201d inline section. But looking at the reference it doesn\u2019t seem like that\u2019s the case. What is supposed be happening here and why would you use it over an append?</p>", "type": "rendered"}, "created_on": "2019-08-20T19:01:43.193858+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-20T19:01:43.203852+00:00", "type": "pullrequest_comment", "id": 113792105}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "9d6cdcaa85b3", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/9d6cdcaa85b3.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/9d6cdcaa85b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "dd120e1fcb26", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/dd120e1fcb26"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/dd120e1fcb26"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-08-19T21:22:37.708167+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113623489.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113623489"}}, "parent": {"id": 113606079, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113606079.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113606079"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "I\u2019m not quite sure I understand what you want here. Are you looking to be able to recall input.master sections from the main class. So to find all DT sections, use a command like input\\_master\\[\u201cDT\u201d\\]? Or am I not getting it?", "markup": "markdown", "html": "<p>I\u2019m not quite sure I understand what you want here. Are you looking to be able to recall input.master sections from the main class. So to find all DT sections, use a command like input_master[\u201cDT\u201d]? Or am I not getting it?</p>", "type": "rendered"}, "created_on": "2019-08-19T19:57:25.544961+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "updated_on": "2019-08-19T19:57:25.553883+00:00", "type": "pullrequest_comment", "id": 113623489}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113617656.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113617656"}}, "parent": {"id": 113602394, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113602394.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113602394"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Added", "markup": "markdown", "html": "<p>Added</p>", "type": "rendered"}, "created_on": "2019-08-19T19:02:54.539507+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-19T19:02:54.551154+00:00", "type": "pullrequest_comment", "id": 113617656}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113617649.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113617649"}}, "parent": {"id": 113604003, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113604003.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113604003"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This has been fixed making the slurry of \\[\\], and \\(\\) better, but there\u2019s still a mess from using OrderedDict", "markup": "markdown", "html": "<p>This has been fixed making the slurry of [], and () better, but there\u2019s still a mess from using OrderedDict</p>", "type": "rendered"}, "created_on": "2019-08-19T19:02:49.813953+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-19T19:02:49.832479+00:00", "type": "pullrequest_comment", "id": 113617649}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113613156.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113613156"}}, "parent": {"id": 113609330, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113609330.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113609330"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This uses the interface of the numpy array input, instead of trying to use the more difficult ndarray interface. This line specifically will turn the input list, or list of lists into an array and then pass it to the array\\_finalize function of the given subclass, cls.", "markup": "markdown", "html": "<p>This uses the interface of the numpy array input, instead of trying to use the more difficult ndarray interface. This line specifically will turn the input list, or list of lists into an array and then pass it to the array_finalize function of the given subclass, cls.</p>", "type": "rendered"}, "created_on": "2019-08-19T18:24:37.267625+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-19T18:24:37.279153+00:00", "type": "pullrequest_comment", "id": 113613156}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113609380.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113609380"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "@{5ac790531b5dd37ea53a123d} this is ready for your revision and feedback", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"5ac790531b5dd37ea53a123d\">@Matthew McNeil</span> this is ready for your revision and feedback</p>", "type": "rendered"}, "created_on": "2019-08-19T17:52:01.909441+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-19T17:52:01.924636+00:00", "type": "pullrequest_comment", "id": 113609380}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113609330.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113609330"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Can you clarify what this is supposed to be accomplishing?", "markup": "markdown", "html": "<p>Can you clarify what this is supposed to be accomplishing?</p>", "type": "rendered"}, "created_on": "2019-08-19T17:51:38.679469+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-19T17:51:38.689949+00:00", "type": "pullrequest_comment", "id": 113609330}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113606079.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113606079"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "In general, it would be great if all methods didn\u2019t require their inputs to be iterables even for a single item. The amount of brackets for lists or tuples is a little bewildering to keep track of.\n\nIt would also be great if there was support for `__setattr__` / `__getattr__` and/or `__getitem__` / `__setitem__` as alternative syntax to manipulate gmtk objects by their name. e.g. `input_master.generic_input_object = Object(\"basic decision string\", \"DT\")`. Or using the \u201ckey\u201d notation with something like `input_master['generic_input_object']`.", "markup": "markdown", "html": "<p>In general, it would be great if all methods didn\u2019t require their inputs to be iterables even for a single item. The amount of brackets for lists or tuples is a little bewildering to keep track of.</p>\n<p>It would also be great if there was support for <code>__setattr__</code> / <code>__getattr__</code> and/or <code>__getitem__</code> / <code>__setitem__</code> as alternative syntax to manipulate gmtk objects by their name. e.g. <code>input_master.generic_input_object = Object(\"basic decision string\", \"DT\")</code>. Or using the \u201ckey\u201d notation with something like <code>input_master['generic_input_object']</code>.</p>", "type": "rendered"}, "created_on": "2019-08-19T17:25:07.393981+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-19T17:25:07.401415+00:00", "type": "pullrequest_comment", "id": 113606079}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113604003.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113604003"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "There probably should be an `__init__` definition that allows for a single non-iterable object to initialize this", "markup": "markdown", "html": "<p>There probably should be an <code>__init__</code> definition that allows for a single non-iterable object to initialize this</p>", "type": "rendered"}, "created_on": "2019-08-19T17:07:22.757654+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-19T17:07:22.767212+00:00", "type": "pullrequest_comment", "id": 113604003}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113602394.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113602394"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This type checking is not considered for the constructor / `__init__` call", "markup": "markdown", "html": "<p>This type checking is not considered for the constructor / <code>__init__</code> call</p>", "type": "rendered"}, "created_on": "2019-08-19T16:53:44.636120+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-19T16:53:44.645886+00:00", "type": "pullrequest_comment", "id": 113602394}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113602345.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113602345"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Fix wording", "markup": "markdown", "html": "<p>Fix wording</p>", "type": "rendered"}, "created_on": "2019-08-19T16:53:18.414174+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-19T16:53:18.428701+00:00", "type": "pullrequest_comment", "id": 113602345}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/113413659.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-113413659"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "@{557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee} This is ready for your review again, with a simple test case added", "markup": "markdown", "html": "<p><span class=\"ap-mention ap-mention-me\" data-atlassian-id=\"557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee\">@Eric Roberts</span> This is ready for your review again, with a simple test case added</p>", "type": "rendered"}, "created_on": "2019-08-16T15:29:55.643178+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "updated_on": "2019-08-16T15:29:55.659673+00:00", "type": "pullrequest_comment", "id": 113413659}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "9d6cdcaa85b3", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/9d6cdcaa85b3.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/9d6cdcaa85b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4ff55844b949", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/4ff55844b949"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/4ff55844b949"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-08-16T15:27:42.223461+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112967216.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112967216"}}, "parent": {"id": 112815322, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112815322.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112815322"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "Object is used as a general object for sections which have yet to be implemented, such as DT. These would be inputted plainly as str, rather than having a class to handle their format automatically. \n\nIn the future, there are plans to have these classes inherit from here, though for now this is our workaround. There seems to be a lack of possible names from the gmtk manual, which is why Object was settled on, is there a more appropriate name?", "markup": "markdown", "html": "<p>Object is used as a general object for sections which have yet to be implemented, such as DT. These would be inputted plainly as str, rather than having a class to handle their format automatically. </p>\n<p>In the future, there are plans to have these classes inherit from here, though for now this is our workaround. There seems to be a lack of possible names from the gmtk manual, which is why Object was settled on, is there a more appropriate name?</p>", "type": "rendered"}, "created_on": "2019-08-13T16:14:23.528305+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "inline": {}, "updated_on": "2019-08-13T16:14:23.542926+00:00", "type": "pullrequest_comment", "id": 112967216}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}], "next": "data/repositories/hoffmanlab/segway/pullrequests/105/activity_ctx=EGfn7ILFA.json"}