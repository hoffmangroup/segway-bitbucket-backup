{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112822694.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112822694"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "@{5ac790531b5dd37ea53a123d} this is ready for your revision and feedback", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"5ac790531b5dd37ea53a123d\">@Matthew McNeil</span> this is ready for your revision and feedback</p>", "type": "rendered"}, "created_on": "2019-08-12T20:34:27.728997+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-12T20:34:27.743203+00:00", "type": "pullrequest_comment", "id": 112822694}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112822600.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112822600"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This PR could really use some \\(unit\\) tests to at least get a better idea to get a whole picture on how this module would work at generating input master [files.](http://files.It) It\u2019s not completely clear still from the example exactly how it all comes together. It would also help reduce any potential existing and future bug anxiety.", "markup": "markdown", "html": "<p>This PR could really use some (unit) tests to at least get a better idea to get a whole picture on how this module would work at generating input master <a data-is-external-link=\"true\" href=\"http://files.It\" rel=\"nofollow\">files.</a> It\u2019s not completely clear still from the example exactly how it all comes together. It would also help reduce any potential existing and future bug anxiety.</p>", "type": "rendered"}, "created_on": "2019-08-12T20:33:28.896605+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-12T20:33:28.904127+00:00", "type": "pullrequest_comment", "id": 112822600}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112821184.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112821184"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "In general the kind types should be constants outside the class definitions. Something as simple as `DENSE_CPT_KIND=\u201dDENSE_CPT\u201d`", "markup": "markdown", "html": "<p>In general the kind types should be constants outside the class definitions. Something as simple as <code>DENSE_CPT_KIND=\u201dDENSE_CPT\u201d</code></p>", "type": "rendered"}, "created_on": "2019-08-12T20:19:26.842620+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-12T20:19:26.852072+00:00", "type": "pullrequest_comment", "id": 112821184}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112818435.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112818435"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "`self.kind` is not defined here correct? `self.kind()` is however", "markup": "markdown", "html": "<p><code>self.kind</code> is not defined here correct? <code>self.kind()</code> is however</p>", "type": "rendered"}, "created_on": "2019-08-12T19:54:10.430066+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-12T19:54:10.438298+00:00", "type": "pullrequest_comment", "id": 112818435}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112815523.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112815523"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "\u201cThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\u201d\n\nThis is not clear to me since the only object that inherits from OrderedDict is `Section`. Is \u201cSection\u201d the main class holding other subsections?", "markup": "markdown", "html": "<p>\u201cThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\u201d</p>\n<p>This is not clear to me since the only object that inherits from OrderedDict is <code>Section</code>. Is \u201cSection\u201d the main class holding other subsections?</p>", "type": "rendered"}, "created_on": "2019-08-12T19:29:34.927364+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "updated_on": "2019-08-12T19:29:34.938078+00:00", "type": "pullrequest_comment", "id": 112815523}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/112815322.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-112815322"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "This is not used anywhere. What is its purpose?\n\nIf it is used it needs to have a better name. `object` is a real type of object and this is too close for potential future bugs.", "markup": "markdown", "html": "<p>This is not used anywhere. What is its purpose?</p>\n<p>If it is used it needs to have a better name. <code>object</code> is a real type of object and this is too close for potential future bugs.</p>", "type": "rendered"}, "created_on": "2019-08-12T19:27:50.631177+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {}, "updated_on": "2019-08-12T19:27:50.638294+00:00", "type": "pullrequest_comment", "id": 112815322}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "e296818322be", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e296818322be.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e296818322be"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7b9151840787", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/7b9151840787"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/7b9151840787"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-07-29T14:40:57.553551+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "e296818322be", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e296818322be.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e296818322be"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d98ef7edb45b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/d98ef7edb45b"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/d98ef7edb45b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-07-29T14:38:49.945568+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"comment": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments/111046743.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105/_/diff#comment-111046743"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}, "content": {"raw": "@{557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee} This is ready for your review", "markup": "markdown", "html": "<p><span class=\"ap-mention ap-mention-me\" data-atlassian-id=\"557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee\">@Eric Roberts</span> This is ready for your review</p>", "type": "rendered"}, "created_on": "2019-07-29T14:36:51.128385+00:00", "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "updated_on": "2019-07-29T14:36:51.150870+00:00", "type": "pullrequest_comment", "id": 111046743}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "e296818322be", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e296818322be.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e296818322be"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "152d1f87601c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/152d1f87601c"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/152d1f87601c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-07-29T14:35:25.881184+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "e035d27fc406", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e035d27fc406.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e035d27fc406"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "81a6218edffd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/81a6218edffd"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/81a6218edffd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-07-18T19:26:10.101169+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "e035d27fc406", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e035d27fc406.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e035d27fc406"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "94e0f2285f9d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/94e0f2285f9d"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/94e0f2285f9d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-07-16T20:18:34.329121+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "e035d27fc406", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/e035d27fc406.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/e035d27fc406"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "461b41106e0c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/461b41106e0c"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/461b41106e0c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-07-15T19:46:02.850726+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "cad3fd722588", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/cad3fd722588.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/cad3fd722588"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "52ad5e9111ce", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/52ad5e9111ce"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/52ad5e9111ce"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-06-26T19:03:45.860953+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}, {"update": {"description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "title": "WIP PyGMTK input_master.py file", "destination": {"commit": {"hash": "cad3fd722588", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/cad3fd722588.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/cad3fd722588"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "52ad5e9111ce", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/52ad5e9111ce"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/52ad5e9111ce"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "state": "OPEN", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "date": "2019-06-26T19:03:45.803246+00:00"}, "pull_request": {"type": "pullrequest", "id": 105, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}}, "title": "WIP PyGMTK input_master.py file"}}]}