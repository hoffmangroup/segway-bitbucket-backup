{"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/56/comments/21521639.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/rcwchan/segway_fork2:None..None?path=segway%2Frun.py"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/56/_/diff#comment-21521639"}}, "parent": {"id": 21153542, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/56/comments/21153542.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/56/_/diff#comment-21153542"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/56.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/56"}}, "title": "Change train_windows (in minibatch) to sort in reverse, such that the last index will not be greater than 9999"}, "content": {"raw": "@ericr86 As discussed previously, resampling the random list of windows until there is at least one number less than 9999 is the simplest solution, I think.\n\nRoughly the way to do this would be to check the lowest number in the reverse-sorted train windows, and if greater than 9999, then repeat this:\n\n```\n2078             train_window_indices_shuffled = choice(range(num_train_windows),\n2079                                                    num_train_windows,\n2080                                                    replace=False)\n2081             train_windows = []\n2082             cur_bases = 0\n2083             total_bases = sum(\n2084                 train_window[1] for train_window in train_windows_all\n2085             )\n2086 \n2087             for train_window_index in train_window_indices_shuffled:\n2088                 if (float(cur_bases) / total_bases) < self.minibatch_fraction:\n2089                     train_windows.append(train_windows_all[train_window_index])\n2090                     cur_bases += train_windows_all[train_window_index][1]\n2091                 else:\n2092                     break\n2093 \n```\nand re-check, and repeat, until the smallest number is less than 9999. Is this something we would like to implement?\n\nThanks!", "markup": "markdown", "html": "<p>@ericr86 As discussed previously, resampling the random list of windows until there is at least one number less than 9999 is the simplest solution, I think.</p>\n<p>Roughly the way to do this would be to check the lowest number in the reverse-sorted train windows, and if greater than 9999, then repeat this:</p>\n<div class=\"codehilite\"><pre><span></span>2078             train_window_indices_shuffled = choice(range(num_train_windows),\n2079                                                    num_train_windows,\n2080                                                    replace=False)\n2081             train_windows = []\n2082             cur_bases = 0\n2083             total_bases = sum(\n2084                 train_window[1] for train_window in train_windows_all\n2085             )\n2086 \n2087             for train_window_index in train_window_indices_shuffled:\n2088                 if (float(cur_bases) / total_bases) &lt; self.minibatch_fraction:\n2089                     train_windows.append(train_windows_all[train_window_index])\n2090                     cur_bases += train_windows_all[train_window_index][1]\n2091                 else:\n2092                     break\n2093 \n</pre></div>\n\n\n<p>and re-check, and repeat, until the smallest number is less than 9999. Is this something we would like to implement?</p>\n<p>Thanks!</p>", "type": "rendered"}, "created_on": "2016-07-26T18:53:35.591591+00:00", "user": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "inline": {"to": null, "from": null, "outdated": false, "path": "segway/run.py"}, "updated_on": "2016-07-26T18:56:52.069554+00:00", "type": "pullrequest_comment", "id": 21521639}