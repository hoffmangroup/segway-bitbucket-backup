{"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/37/comments/15680497.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/37/_/diff#comment-15680497"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/37.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/37"}}, "title": "Minibatch training"}, "content": {"raw": "@mlibbrecht, thanks for this addition. I think it will be very useful. The implementation looks fine but I am concerned about the interface--it's not totally friendly to have to set number of windows and `--split-sequences` like that, I'm not sure how it interacts with windows that are less than the max (say at the end of a chromosome or an `--include-coords` region and I think we are going to have some confused users.\n\nWhat would you think instead of having the interface like `--minibatch-fraction=FRAC` instead. `FRAC` would be a number between 0.0 and 1.0 indicating how much of the selected training region (default: the whole genome). You would store that integer number of bases in a variable. Then you would keep adding random windows until you got to that fraction of the genome, rather than just a particular number of windows. Making sure to compare against integer number of bases would reduce any numerical problems you might get from comparing with fractions that might lead to never getting to 1.0.", "markup": "markdown", "html": "<p>@mlibbrecht, thanks for this addition. I think it will be very useful. The implementation looks fine but I am concerned about the interface--it's not totally friendly to have to set number of windows and <code>--split-sequences</code> like that, I'm not sure how it interacts with windows that are less than the max (say at the end of a chromosome or an <code>--include-coords</code> region and I think we are going to have some confused users.</p>\n<p>What would you think instead of having the interface like <code>--minibatch-fraction=FRAC</code> instead. <code>FRAC</code> would be a number between 0.0 and 1.0 indicating how much of the selected training region (default: the whole genome). You would store that integer number of bases in a variable. Then you would keep adding random windows until you got to that fraction of the genome, rather than just a particular number of windows. Making sure to compare against integer number of bases would reduce any numerical problems you might get from comparing with fractions that might lead to never getting to 1.0.</p>", "type": "rendered"}, "created_on": "2016-03-12T22:13:07.054616+00:00", "user": {"display_name": "Michael Hoffman", "uuid": "{ffa8e039-5d4d-4f69-a4ba-ac25cbaf700b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bffa8e039-5d4d-4f69-a4ba-ac25cbaf700b%7D"}, "html": {"href": "https://bitbucket.org/%7Bffa8e039-5d4d-4f69-a4ba-ac25cbaf700b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6a95e857a02504cbad5fe965c9d9e4bbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMH-1.png"}}, "nickname": "hoffman", "type": "user", "account_id": "557058:a9657985-692c-405c-995b-4e41cda7ba2b"}, "updated_on": "2016-03-12T22:13:07.061193+00:00", "type": "pullrequest_comment", "id": 15680497}