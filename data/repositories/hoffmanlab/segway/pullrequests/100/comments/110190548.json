{"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/100/comments/110190548.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/mjmm13/segway_python23:b5aab915d778..e035d27fc406?path=segway%2Fobservations.py"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/100/_/diff#comment-110190548"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 100, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/100.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/100"}}, "title": "Implement virtual evidence for all segway tasks"}, "content": {"raw": "I have some general comments on this function as a whole:\n\n1. `prior_list` should be completely clear on it\u2019s type. In the description it looks like the downsampling returns a dictionary? Is the input a dictionary or a list of lists? Must there be a value for every label at this point?\n2. The input of `prior_list` is not clear on what/if there exists a probability defined for every label before \u201cdownsampling\u201d. Not until farther down the function do you realize this is not the case and hence the need for the uniform fill on remaining probabilites/etc. It might be considered a separate transformation/function.\n3. `num_segs` although following some psuedo-convention in this module is a misnomer. It has nothing to do with the number of segments, which is confusing in a downsampling context. It is the number of labels \\(unless I\u2019m mistaken\\). `num_labels` seems more appropriate.\n4. It looks like there\u2019s virtually nothing shared calculation-wise between downsampling the presence and list of prior dictionaries. It looks like the two portions should split apart. If there\u2019s shared patterns of code between them, then those should be split into functions themselves \\(say perhaps the resolution partitioning portion of the code\\).\n\n\u200c", "markup": "markdown", "html": "<p>I have some general comments on this function as a whole:</p>\n<ol>\n<li><code>prior_list</code> should be completely clear on it\u2019s type. In the description it looks like the downsampling returns a dictionary? Is the input a dictionary or a list of lists? Must there be a value for every label at this point?</li>\n<li>The input of <code>prior_list</code> is not clear on what/if there exists a probability defined for every label before \u201cdownsampling\u201d. Not until farther down the function do you realize this is not the case and hence the need for the uniform fill on remaining probabilites/etc. It might be considered a separate transformation/function.</li>\n<li><code>num_segs</code> although following some psuedo-convention in this module is a misnomer. It has nothing to do with the number of segments, which is confusing in a downsampling context. It is the number of labels (unless I\u2019m mistaken). <code>num_labels</code> seems more appropriate.</li>\n<li>It looks like there\u2019s virtually nothing shared calculation-wise between downsampling the presence and list of prior dictionaries. It looks like the two portions should split apart. If there\u2019s shared patterns of code between them, then those should be split into functions themselves (say perhaps the resolution partitioning portion of the code).</li>\n</ol>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-07-22T16:41:11.100866+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {"to": 327, "from": null, "outdated": true, "path": "segway/observations.py"}, "updated_on": "2019-07-22T16:41:11.110107+00:00", "type": "pullrequest_comment", "id": 110190548}