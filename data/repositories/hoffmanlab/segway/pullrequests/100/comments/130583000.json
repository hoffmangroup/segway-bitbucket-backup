{"links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/100/comments/130583000.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/mjmm13/segway_python23:260a2f8e8154..8cbdd3f79d65?path=segway%2Fobservations.py"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/100/_/diff#comment-130583000"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 100, "links": {"self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/100.json"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/100"}}, "title": "Implement virtual evidence for all segway tasks"}, "content": {"raw": "There probably wasn\u2019t enough clarity in the `check_is_close` initial discussion regarding on how roughly it should look. The objective was just to abstract the old `EPSILON` checks out into a function in case we want to change the exact behavior in the future \\(using np.is\\_close or some other threshold\\). So I believe the function signature should look something like `check_is_close(value, reference)` or something along those lines where potentially the prior sum takes place outside the function before calling it \\(from my understanding\\) and `reference` in most cases would simply be called with a value of `1.0`.\n\nThe `start` parameter also seems out of place. I\u2019m not even quite sure what it means but it looks like it\u2019s strictly used for better error reporting. In this case, it would be better, as you have to raise the custom warning and have the caller use its context \\(with `start`\\) for a better error report.\n\nUnit tests are welcome on this function.", "markup": "markdown", "html": "<p>There probably wasn\u2019t enough clarity in the <code>check_is_close</code> initial discussion regarding on how roughly it should look. The objective was just to abstract the old <code>EPSILON</code> checks out into a function in case we want to change the exact behavior in the future (using np.is_close or some other threshold). So I believe the function signature should look something like <code>check_is_close(value, reference)</code> or something along those lines where potentially the prior sum takes place outside the function before calling it (from my understanding) and <code>reference</code> in most cases would simply be called with a value of <code>1.0</code>.</p>\n<p>The <code>start</code> parameter also seems out of place. I\u2019m not even quite sure what it means but it looks like it\u2019s strictly used for better error reporting. In this case, it would be better, as you have to raise the custom warning and have the caller use its context (with <code>start</code>) for a better error report.</p>\n<p>Unit tests are welcome on this function.</p>", "type": "rendered"}, "created_on": "2020-01-06T17:40:30.424625+00:00", "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "inline": {"to": 552, "from": null, "outdated": true, "path": "segway/observations.py"}, "updated_on": "2020-01-06T17:40:30.431629+00:00", "type": "pullrequest_comment", "id": 130583000}