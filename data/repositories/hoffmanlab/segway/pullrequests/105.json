{"rendered": {"description": {"raw": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "markup": "markdown", "html": "<h1 id=\"markdown-header-package-gmtk\">Package gmtk</h1>\n<p>gmtk</p>\n<p>Initially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created</p>\n<h2 id=\"markdown-header-module-gmtkinput95master\">Module gmtk.input_master</h2>\n<p>The overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.</p>\n<p>Keys: str representing a GMTK object types</p>\n<p>Values: some object with a __str__() method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.</p>\n<p>Implementation plan: Writing will be prioritized. Reading is later, if ever.</p>\n<h3 id=\"markdown-header-inputmaster-class\">InputMaster class</h3>\n<h4 id=\"markdown-header-class-gmtkinput95masterinputmaster\">class gmtk.input_master.InputMaster</h4>\n<p>subclass of: list</p>\n<p>items: object with a __str__() method. Mostly this will be either Section objects or hard-coded strs.</p>\n<p>There can be multiple instances of sections for an object type so this is a sequence (list) rather than a mapping (OrderedDict)</p>\n<p>__str__(self): return \u201c\\n\u201d.join(str(item) for item in self)</p>\n<h3 id=\"markdown-header-section-classes\">Section classes</h3>\n<h4 id=\"markdown-header-class-gmtkinput95mastersection\">class gmtk.input_master.Section</h4>\n<p>subclass of: collections.OrderedDict</p>\n<p>key: str (object name)</p>\n<p>value: an object with a __str__() method</p>\n<p>__str__(self): call self.kind() for its assertion purposes, render section beginning with the number of objects</p>\n<p>kind(self): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form [`type` and `class` are reserved for Python, and something like `object_type` is clunky]</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterinlinesection\">class gmtk.input_master.InlineSection</h4>\n<p>subclass of: Section</p>\n<p>only Section subclass slated for initial implementation</p>\n<p>__str__(self): render \u201c{self.kind()}_IN_FILE infile\\n\\n\u201d and then Section.__str__()</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterfilesection\">class gmtk.input_master.FileSection</h4>\n<p>subclass of: Section</p>\n<p>this and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.</p>\n<p>__init__(self, filename, items): raise NotImplementedError</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterasciifilesection\">class gmtk.input_master.ASCIIFileSection</h4>\n<p>subclass of: FileSection</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterbinaryfilesection\">class gmtk.input_master.BinaryFileSection</h4>\n<p>subclass of: FileSection</p>\n<h3 id=\"markdown-header-gmtk-object-classes\">GMTK Object classes</h3>\n<h4 id=\"markdown-header-class-gmtkinput95masterobject\">class gmtk.input_master.Object</h4>\n<p>subclass of str</p>\n<p>kind = None [class attribute that includes the GMTK name for this object class (e.g. DENSE_CPT)]</p>\n<p>__str__(): render object</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterarray\">class gmtk.input_master.Array</h4>\n<p>subclass of ndarray</p>\n<p>__new__(cls, *args, **kwargs):</p>\n<p>\u201c\u201d\u201d</p>\n<p>replace the more esoteric interface of numpy.ndarray.__new__() with the utility interface of numpy.array()</p>\n<p>\u201c\u201d\u201d</p>\n<p>return numpy.array(*args, **kwargs).view(cls)</p>\n<p>__str__(self): render object. For e.g. DenseCPT the # of parents is 1-len(self.shape), and cardinalities are all self.shape</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterdensecpt\">class gmtk.input_master.DenseCPT</h4>\n<p>subclass of Array</p>\n<p>kind = \u201cDENSE_CPT\u201d</p>\n<p>The first gmtk object that will be adapted is the DENSE_CPT. These are dense conditional probability tables of various sizes. An example rendering is:</p>\n<p>\u200c</p>\n<p>0 2 % # of parents, self cardinality</p>\n<p>0.5 0.5 % Probability Table</p>\n<p>\u200c</p>\n<p>[the index and object name are emitted by the Section object rather than the Object object]</p>\n<p>\u200c</p>\n<p>1 2 1 % # of parents, parent 0 cardinality, self cardinality</p>\n<p>1.0</p>\n<p>1.0</p>\n<p>The implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way</p>\n<h2 id=\"markdown-header-example-usage\">Example usage</h2>\n<p>Several different ways you can use this interface:</p>\n<p><code>from numpy import array</code></p>\n<p><code>from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean</code></p>\n<p><code>input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])</code></p>\n<p><code>input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])</code></p>\n<p><code>names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))</code></p>\n<p><code>input_master.append(InlineSection(names_dict))</code></p>", "type": "rendered"}, "title": {"raw": "WIP PyGMTK input_master.py file", "markup": "markdown", "html": "<p>WIP PyGMTK input_master.py file</p>", "type": "rendered"}}, "type": "pullrequest", "description": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/105/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diffstat/mjmm13/segway_python23:776377c0eba5%0Df04cce0da8be?from_pullrequest_id=105"}, "commits": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/commits.json"}, "self": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105.json"}, "comments": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/105/merge"}, "html": {"href": "#!/hoffmanlab/segway/pull-requests/105"}, "activity": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/diff/mjmm13/segway_python23:776377c0eba5%0Df04cce0da8be?from_pullrequest_id=105"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segway/pullrequests/105/approve"}, "statuses": {"href": "data/repositories/hoffmanlab/segway/pullrequests/105/statuses_page=1.json"}}, "title": "WIP PyGMTK input_master.py file", "close_source_branch": false, "reviewers": [], "id": 105, "destination": {"commit": {"hash": "f04cce0da8be", "type": "commit", "links": {"self": {"href": "data/repositories/hoffmanlab/segway/commit/f04cce0da8be.json"}, "html": {"href": "#!/hoffmanlab/segway/commits/f04cce0da8be"}}}, "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segway.json"}, "html": {"href": "#!/hoffmanlab/segway"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}ts=python"}}, "type": "repository", "name": "segway", "full_name": "hoffmanlab/segway", "uuid": "{68bf38bf-f0c1-4c9c-909e-0ee4b2c26257}"}, "branch": {"name": "default"}}, "created_on": "2019-06-26T19:03:45.782915+00:00", "summary": {"raw": "# Package gmtk\r\n\r\ngmtk\r\n\r\n  \r\n\r\nInitially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created\r\n\r\n## Module gmtk.input\\_master\r\n\r\n  \r\n\r\nThe overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.\r\n\r\n  \r\n\r\nKeys: str representing a GMTK object types\r\n\r\nValues: some object with a \\_\\_str\\_\\_\\(\\) method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.\r\n\r\n  \r\n\r\nImplementation plan: Writing will be prioritized. Reading is later, if ever.\r\n\r\n### InputMaster class\r\n\r\n#### class gmtk.input\\_master.InputMaster\r\n\r\nsubclass of: list\r\n\r\nitems: object with a \\_\\_str\\_\\_\\(\\) method. Mostly this will be either Section objects or hard-coded strs.\r\n\r\nThere can be multiple instances of sections for an object type so this is a sequence \\(list\\) rather than a mapping \\(OrderedDict\\)\r\n\r\n\\_\\_str\\_\\_\\(self\\): return \u201c\\\\n\u201d.join\\(str\\(item\\) for item in self\\)\r\n\r\n### Section classes\r\n\r\n#### class gmtk.input\\_master.Section\r\n\r\nsubclass of: collections.OrderedDict\r\n\r\nkey: str \\(object name\\)\r\n\r\nvalue: an object with a \\_\\_str\\_\\_\\(\\) method\r\n\r\n\\_\\_str\\_\\_\\(self\\): call self.kind\\(\\) for its assertion purposes, render section beginning with the number of objects\r\n\r\nkind\\(self\\): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form \\[\\`type\\` and \\`class\\` are reserved for Python, and something like \\`object\\_type\\` is clunky\\]\r\n\r\n#### class gmtk.input\\_master.InlineSection\r\n\r\nsubclass of: Section\r\n\r\nonly Section subclass slated for initial implementation\r\n\r\n\\_\\_str\\_\\_\\(self\\): render \u201c\\{self.kind\\(\\)\\}\\_IN\\_FILE infile\\\\n\\\\n\u201d and then Section.\\_\\_str\\_\\_\\(\\)\r\n\r\n#### class gmtk.input\\_master.FileSection\r\n\r\nsubclass of: Section\r\n\r\nthis and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.\r\n\r\n\\_\\_init\\_\\_\\(self, filename, items\\): raise NotImplementedError\r\n\r\n#### class gmtk.input\\_master.ASCIIFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n#### class gmtk.input\\_master.BinaryFileSection\r\n\r\nsubclass of: FileSection\r\n\r\n### GMTK Object classes\r\n\r\n#### class gmtk.input\\_master.Object\r\n\r\nsubclass of str\r\n\r\nkind = None \\[class attribute that includes the GMTK name for this object class \\(e.g. DENSE\\_CPT\\)\\]\r\n\r\n\\_\\_str\\_\\_\\(\\): render object\r\n\r\n#### class gmtk.input\\_master.Array\r\n\r\nsubclass of ndarray\r\n\r\n\\_\\_new\\_\\_\\(cls, \\*args, \\*\\*kwargs\\):\r\n\r\n\u201c\u201d\u201d\r\n\r\nreplace the more esoteric interface of numpy.ndarray.\\_\\_new\\_\\_\\(\\) with the utility interface of numpy.array\\(\\)\r\n\r\n\u201c\u201d\u201d\r\n\r\nreturn numpy.array\\(\\*args, \\*\\*kwargs\\).view\\(cls\\)\r\n\r\n  \r\n\\_\\_str\\_\\_\\(self\\): render object. For e.g. DenseCPT the # of parents is 1-len\\(self.shape\\), and cardinalities are all self.shape\r\n\r\n#### class gmtk.input\\_master.DenseCPT\r\n\r\nsubclass of Array\r\n\r\nkind = \u201cDENSE\\_CPT\u201d\r\n\r\n  \r\nThe first gmtk object that will be adapted is the DENSE\\_CPT. These are dense conditional probability tables of various sizes. An example rendering is:\r\n\r\n\u200c\r\n\r\n0 2 % # of parents, self cardinality\r\n\r\n0\\.5 0.5 % Probability Table\r\n\r\n\u200c\r\n\r\n\\[the index and object name are emitted by the Section object rather than the Object object\\]\r\n\r\n\u200c\r\n\r\n1 2 1 % # of parents, parent 0 cardinality, self cardinality\r\n\r\n1\\.0\r\n\r\n1\\.0\r\n\r\nThe implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way\r\n\r\n## Example usage\r\n\r\nSeveral different ways you can use this interface:\r\n\r\n`from numpy import array`\r\n\r\n`from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean`\r\n\r\n`input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])`\r\n\r\n`input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])`\r\n\r\n`names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))`\r\n\r\n`input_master.append(InlineSection(names_dict))`", "markup": "markdown", "html": "<h1 id=\"markdown-header-package-gmtk\">Package gmtk</h1>\n<p>gmtk</p>\n<p>Initially will be implemented as module segway.gmtk, because it will be easier to implement use of PyGMTK in Segway at the same time as the PyGMTK implementation is created</p>\n<h2 id=\"markdown-header-module-gmtkinput95master\">Module gmtk.input_master</h2>\n<p>The overall input master file is represented by a collections.OrderedDict subclass. Ordering should not be necessary for operation, but means more consistent output for testing purposes.</p>\n<p>Keys: str representing a GMTK object types</p>\n<p>Values: some object with a __str__() method that represents a section of an input master file. This can either be a plain str or a more complex class that renders an str based on its own attributes. Often this will involve recursive rendering through a collection of strs. This enables stepwise implementation of specific classes for GMTK object types.</p>\n<p>Implementation plan: Writing will be prioritized. Reading is later, if ever.</p>\n<h3 id=\"markdown-header-inputmaster-class\">InputMaster class</h3>\n<h4 id=\"markdown-header-class-gmtkinput95masterinputmaster\">class gmtk.input_master.InputMaster</h4>\n<p>subclass of: list</p>\n<p>items: object with a __str__() method. Mostly this will be either Section objects or hard-coded strs.</p>\n<p>There can be multiple instances of sections for an object type so this is a sequence (list) rather than a mapping (OrderedDict)</p>\n<p>__str__(self): return \u201c\\n\u201d.join(str(item) for item in self)</p>\n<h3 id=\"markdown-header-section-classes\">Section classes</h3>\n<h4 id=\"markdown-header-class-gmtkinput95mastersection\">class gmtk.input_master.Section</h4>\n<p>subclass of: collections.OrderedDict</p>\n<p>key: str (object name)</p>\n<p>value: an object with a __str__() method</p>\n<p>__str__(self): call self.kind() for its assertion purposes, render section beginning with the number of objects</p>\n<p>kind(self): figure out what kind of object this section contains from its contents, ensure that they are all the same kind of object. return the kind in str form [`type` and `class` are reserved for Python, and something like `object_type` is clunky]</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterinlinesection\">class gmtk.input_master.InlineSection</h4>\n<p>subclass of: Section</p>\n<p>only Section subclass slated for initial implementation</p>\n<p>__str__(self): render \u201c{self.kind()}_IN_FILE infile\\n\\n\u201d and then Section.__str__()</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterfilesection\">class gmtk.input_master.FileSection</h4>\n<p>subclass of: Section</p>\n<p>this and its subclasses are not initially implemented. it might be useful to allow items to be some sort of sentinel object that indicates that the caller will get the data is into the filename outside the PyGMTK spec, so no rendering is necessary.</p>\n<p>__init__(self, filename, items): raise NotImplementedError</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterasciifilesection\">class gmtk.input_master.ASCIIFileSection</h4>\n<p>subclass of: FileSection</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterbinaryfilesection\">class gmtk.input_master.BinaryFileSection</h4>\n<p>subclass of: FileSection</p>\n<h3 id=\"markdown-header-gmtk-object-classes\">GMTK Object classes</h3>\n<h4 id=\"markdown-header-class-gmtkinput95masterobject\">class gmtk.input_master.Object</h4>\n<p>subclass of str</p>\n<p>kind = None [class attribute that includes the GMTK name for this object class (e.g. DENSE_CPT)]</p>\n<p>__str__(): render object</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterarray\">class gmtk.input_master.Array</h4>\n<p>subclass of ndarray</p>\n<p>__new__(cls, *args, **kwargs):</p>\n<p>\u201c\u201d\u201d</p>\n<p>replace the more esoteric interface of numpy.ndarray.__new__() with the utility interface of numpy.array()</p>\n<p>\u201c\u201d\u201d</p>\n<p>return numpy.array(*args, **kwargs).view(cls)</p>\n<p>__str__(self): render object. For e.g. DenseCPT the # of parents is 1-len(self.shape), and cardinalities are all self.shape</p>\n<h4 id=\"markdown-header-class-gmtkinput95masterdensecpt\">class gmtk.input_master.DenseCPT</h4>\n<p>subclass of Array</p>\n<p>kind = \u201cDENSE_CPT\u201d</p>\n<p>The first gmtk object that will be adapted is the DENSE_CPT. These are dense conditional probability tables of various sizes. An example rendering is:</p>\n<p>\u200c</p>\n<p>0 2 % # of parents, self cardinality</p>\n<p>0.5 0.5 % Probability Table</p>\n<p>\u200c</p>\n<p>[the index and object name are emitted by the Section object rather than the Object object]</p>\n<p>\u200c</p>\n<p>1 2 1 % # of parents, parent 0 cardinality, self cardinality</p>\n<p>1.0</p>\n<p>1.0</p>\n<p>The implementation of this is all in Array, the only thing that actually needs to get set here is kind. Many of the other sections work the same way</p>\n<h2 id=\"markdown-header-example-usage\">Example usage</h2>\n<p>Several different ways you can use this interface:</p>\n<p><code>from numpy import array</code></p>\n<p><code>from gmtk.input_master import InlineSection, InputMaster, DenseCPT, Mean</code></p>\n<p><code>input_master = InputMaster([InlineSection([(\u201cexample_cpt\u201d, DenseCPT([[0.5, 0.5]])])])</code></p>\n<p><code>input_master[0].update([(\"two_dimensional_cpt\", DenseCPT([[[0.25, 0.25], [0.25, 0.25]]]))])</code></p>\n<p><code>names_dict = dict(collection_h3k4me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"), collection_h3k36me3=Object(\"seg0_h3k4me3\", \"NAME_COLLECTION\"))</code></p>\n<p><code>input_master.append(InlineSection(names_dict))</code></p>", "type": "rendered"}, "source": {"commit": {"hash": "776377c0eba5", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23/commit/776377c0eba5"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23/commits/776377c0eba5"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mjmm13/segway_python23"}, "html": {"href": "https://bitbucket.org/mjmm13/segway_python23"}, "avatar": {"href": "data/bytebucket.org/ravatar/{735c8db4-9d46-48a5-95b3-1d01db953c08}ts=python"}}, "type": "repository", "name": "segway_python23", "full_name": "mjmm13/segway_python23", "uuid": "{735c8db4-9d46-48a5-95b3-1d01db953c08}"}, "branch": {"name": "gmtk"}}, "comment_count": 51, "state": "OPEN", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-10-10T16:27:17.320467+00:00", "type": "participant", "approved": false, "user": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}}, {"role": "PARTICIPANT", "participated_on": "2019-10-09T16:23:34.537122+00:00", "type": "participant", "approved": false, "user": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}}], "reason": "", "updated_on": "2019-10-10T16:27:17.320467+00:00", "author": {"display_name": "Matthew McNeil", "uuid": "{018cd21a-1658-4202-9b1e-99dabc3e14d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D"}, "html": {"href": "https://bitbucket.org/%7B018cd21a-1658-4202-9b1e-99dabc3e14d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d7e7604c308bd957d77e1762b5caeddcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-5.png"}}, "nickname": "mjmm13", "type": "user", "account_id": "5ac790531b5dd37ea53a123d"}, "merge_commit": null, "closed_by": null}